# Generated from C:/Users/pmora/Documents/Git/GitHub/DesignShift/Structurizr.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,196,1917,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,1,0,1,0,5,
        0,253,8,0,10,0,12,0,256,9,0,1,0,1,0,1,0,1,0,1,0,3,0,263,8,0,3,0,
        265,8,0,1,0,1,0,5,0,269,8,0,10,0,12,0,272,9,0,1,0,1,0,5,0,276,8,
        0,10,0,12,0,279,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,3,1,295,8,1,1,2,1,2,1,2,3,2,300,8,2,3,2,302,8,2,1,2,
        1,2,5,2,306,8,2,10,2,12,2,309,9,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,3,3,324,8,3,1,4,3,4,327,8,4,1,4,1,4,1,4,1,
        4,3,4,333,8,4,3,4,335,8,4,1,4,1,4,5,4,339,8,4,10,4,12,4,342,9,4,
        1,4,1,4,3,4,346,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,365,8,5,1,6,3,6,368,8,6,1,6,1,6,1,6,
        1,6,3,6,374,8,6,3,6,376,8,6,1,6,1,6,5,6,380,8,6,10,6,12,6,383,9,
        6,1,6,1,6,3,6,387,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,412,8,7,1,
        8,3,8,415,8,8,1,8,1,8,1,8,1,8,1,8,3,8,422,8,8,3,8,424,8,8,3,8,426,
        8,8,1,8,1,8,5,8,430,8,8,10,8,12,8,433,9,8,1,8,1,8,3,8,437,8,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,463,8,9,1,10,3,10,466,8,10,1,10,
        1,10,1,10,1,10,1,10,3,10,473,8,10,3,10,475,8,10,3,10,477,8,10,1,
        10,1,10,5,10,481,8,10,10,10,12,10,484,9,10,1,10,1,10,3,10,488,8,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,3,11,516,8,11,1,12,3,12,519,8,12,1,12,1,12,1,12,1,12,1,12,1,12,
        3,12,527,8,12,3,12,529,8,12,3,12,531,8,12,3,12,533,8,12,1,12,1,12,
        5,12,537,8,12,10,12,12,12,540,9,12,1,12,1,12,3,12,544,8,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,574,8,13,1,14,3,14,577,8,14,1,14,1,14,1,14,1,14,1,14,3,
        14,584,8,14,3,14,586,8,14,3,14,588,8,14,1,14,1,14,5,14,592,8,14,
        10,14,12,14,595,9,14,1,14,1,14,3,14,599,8,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,3,15,624,8,15,1,16,1,16,1,16,1,16,
        3,16,630,8,16,3,16,632,8,16,1,16,1,16,5,16,636,8,16,10,16,12,16,
        639,9,16,1,16,1,16,3,16,643,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,3,17,666,8,17,1,18,1,18,1,18,5,18,671,8,18,10,18,12,18,674,
        9,18,1,19,3,19,677,8,19,1,19,1,19,1,19,1,19,1,20,3,20,684,8,20,1,
        20,1,20,1,20,1,20,3,20,690,8,20,3,20,692,8,20,1,20,1,20,5,20,696,
        8,20,10,20,12,20,699,9,20,1,20,1,20,3,20,703,8,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,3,21,726,8,21,1,22,1,22,1,22,1,22,1,22,
        3,22,733,8,22,3,22,735,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,3,
        25,744,8,25,1,25,1,25,1,25,1,25,1,25,3,25,751,8,25,3,25,753,8,25,
        3,25,755,8,25,1,25,1,25,5,25,759,8,25,10,25,12,25,762,9,25,1,25,
        1,25,3,25,766,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,3,26,783,8,26,1,27,1,27,1,27,5,27,
        788,8,27,10,27,12,27,791,9,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,
        799,8,28,1,28,1,28,1,29,1,29,1,29,5,29,806,8,29,10,29,12,29,809,
        9,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,832,8,30,1,31,
        3,31,835,8,31,1,31,1,31,3,31,839,8,31,1,31,3,31,842,8,31,1,31,1,
        31,5,31,846,8,31,10,31,12,31,849,9,31,1,31,1,31,1,31,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,3,32,888,8,32,1,33,1,33,1,34,3,34,893,
        8,34,1,34,1,34,1,34,1,34,3,34,899,8,34,3,34,901,8,34,1,34,1,34,5,
        34,905,8,34,10,34,12,34,908,9,34,1,34,1,34,1,34,1,35,1,35,3,35,915,
        8,35,1,35,1,35,1,35,3,35,920,8,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,4,39,930,8,39,11,39,12,39,931,1,40,1,40,4,40,936,8,40,
        11,40,12,40,937,1,41,3,41,941,8,41,1,41,1,41,3,41,945,8,41,1,41,
        3,41,948,8,41,1,41,3,41,951,8,41,1,41,1,41,5,41,955,8,41,10,41,12,
        41,958,9,41,1,41,1,41,1,41,1,42,3,42,964,8,42,1,42,1,42,3,42,968,
        8,42,1,42,3,42,971,8,42,1,42,3,42,974,8,42,1,42,1,42,5,42,978,8,
        42,10,42,12,42,981,9,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,3,43,
        990,8,43,1,43,1,43,1,43,3,43,995,8,43,3,43,997,8,43,1,43,1,43,5,
        43,1001,8,43,10,43,12,43,1004,9,43,1,43,1,43,1,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1021,8,44,1,45,
        1,45,3,45,1025,8,45,1,45,1,45,3,45,1029,8,45,3,45,1031,8,45,1,45,
        1,45,5,45,1035,8,45,10,45,12,45,1038,9,45,1,45,1,45,1,45,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,3,46,1050,8,46,1,47,3,47,1053,8,47,1,
        47,1,47,1,47,1,47,3,47,1059,8,47,3,47,1061,8,47,1,47,1,47,5,47,1065,
        8,47,10,47,12,47,1068,9,47,1,47,1,47,3,47,1072,8,47,1,47,1,47,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1085,8,48,1,49,3,
        49,1088,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1095,8,49,3,49,1097,8,
        49,1,49,1,49,5,49,1101,8,49,10,49,12,49,1104,9,49,1,49,1,49,3,49,
        1108,8,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1131,8,50,
        1,51,1,51,1,52,1,52,1,52,3,52,1138,8,52,1,52,3,52,1141,8,52,1,52,
        1,52,5,52,1145,8,52,10,52,12,52,1148,9,52,1,52,1,52,3,52,1152,8,
        52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,3,53,1182,8,53,1,54,1,54,1,54,1,54,3,54,1188,8,54,3,
        54,1190,8,54,1,54,1,54,5,54,1194,8,54,10,54,12,54,1197,9,54,1,54,
        1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        3,55,1213,8,55,1,56,1,56,1,56,1,56,1,56,3,56,1220,8,56,3,56,1222,
        8,56,3,56,1224,8,56,1,56,1,56,5,56,1228,8,56,10,56,12,56,1231,9,
        56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
        57,1,57,1,57,1,57,3,57,1249,8,57,1,58,1,58,1,59,1,59,1,59,1,59,3,
        59,1257,8,59,3,59,1259,8,59,1,59,1,59,5,59,1263,8,59,10,59,12,59,
        1266,9,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1299,8,60,1,61,1,61,1,61,
        1,61,1,62,1,62,1,62,1,62,5,62,1309,8,62,10,62,12,62,1312,9,62,1,
        62,1,62,1,63,1,63,1,63,5,63,1319,8,63,10,63,12,63,1322,9,63,1,63,
        1,63,1,63,1,64,4,64,1328,8,64,11,64,12,64,1329,1,64,1,64,1,65,1,
        65,1,65,1,65,1,66,1,66,1,66,5,66,1341,8,66,10,66,12,66,1344,9,66,
        1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,1354,8,67,1,68,1,68,
        1,68,5,68,1359,8,68,10,68,12,68,1362,9,68,1,68,1,68,1,68,1,69,1,
        69,1,69,3,69,1370,8,69,1,70,1,70,1,70,1,70,3,70,1376,8,70,3,70,1378,
        8,70,3,70,1380,8,70,1,70,1,70,5,70,1384,8,70,10,70,12,70,1387,9,
        70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,
        71,1414,8,71,1,72,1,72,1,72,1,72,5,72,1420,8,72,10,72,12,72,1423,
        9,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1484,8,73,1,74,3,74,
        1487,8,74,1,74,3,74,1490,8,74,1,74,1,74,3,74,1494,8,74,1,74,3,74,
        1497,8,74,1,74,3,74,1500,8,74,1,74,3,74,1503,8,74,1,74,3,74,1506,
        8,74,1,74,3,74,1509,8,74,1,74,3,74,1512,8,74,1,74,3,74,1515,8,74,
        1,74,3,74,1518,8,74,1,74,3,74,1521,8,74,1,74,1,74,1,74,3,74,1526,
        8,74,1,74,1,74,3,74,1530,8,74,3,74,1532,8,74,1,75,1,75,1,75,1,75,
        5,75,1538,8,75,10,75,12,75,1541,9,75,1,75,1,75,1,75,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1582,8,76,1,77,1,77,1,
        78,1,78,1,79,1,79,1,79,3,79,1591,8,79,1,79,1,79,1,80,1,80,1,80,3,
        80,1598,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,3,82,1607,8,82,1,
        82,1,82,1,82,1,82,1,82,5,82,1614,8,82,10,82,12,82,1617,9,82,1,82,
        1,82,3,82,1621,8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,3,84,1630,
        8,84,1,84,1,84,1,84,1,84,5,84,1636,8,84,10,84,12,84,1639,9,84,1,
        84,1,84,3,84,1643,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,5,85,1652,
        8,85,10,85,12,85,1655,9,85,1,85,1,85,3,85,1659,8,85,3,85,1661,8,
        85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,1669,8,86,1,87,1,87,1,87,1,
        87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,
        90,3,90,1688,8,90,1,90,1,90,5,90,1692,8,90,10,90,12,90,1695,9,90,
        1,90,1,90,3,90,1699,8,90,1,90,1,90,1,91,1,91,1,91,1,91,3,91,1707,
        8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,
        1720,8,92,1,93,1,93,1,93,5,93,1725,8,93,10,93,12,93,1728,9,93,1,
        93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,5,95,1740,8,95,10,
        95,12,95,1743,9,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,97,1,97,
        1,97,1,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,5,99,1763,8,99,10,99,
        12,99,1766,9,99,1,99,1,99,1,100,1,100,1,100,1,100,1,101,1,101,1,
        101,5,101,1777,8,101,10,101,12,101,1780,9,101,1,101,1,101,1,101,
        1,102,1,102,1,102,3,102,1788,8,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,3,102,1797,8,102,1,103,1,103,1,103,1,104,1,104,1,105,
        1,105,1,105,1,106,1,106,1,107,1,107,1,107,1,107,3,107,1813,8,107,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1822,8,108,1,109,
        1,109,1,109,1,109,1,109,1,109,5,109,1830,8,109,10,109,12,109,1833,
        9,109,1,109,1,109,1,110,1,110,1,110,4,110,1840,8,110,11,110,12,110,
        1841,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,112,1,112,3,112,
        1853,8,112,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,
        1,116,1,117,1,117,3,117,1867,8,117,1,117,5,117,1870,8,117,10,117,
        12,117,1873,9,117,1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,
        1,121,3,121,1884,8,121,1,121,1,121,1,121,1,121,3,121,1890,8,121,
        3,121,1892,8,121,1,121,1,121,5,121,1896,8,121,10,121,12,121,1899,
        9,121,1,121,1,121,3,121,1903,8,121,1,121,1,121,1,122,1,122,1,122,
        1,122,3,122,1911,8,122,1,123,1,123,1,124,1,124,1,124,0,0,125,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,0,28,1,0,182,
        183,1,0,4,23,1,0,24,27,3,0,30,30,186,186,190,190,2,0,30,30,186,186,
        1,0,63,65,1,0,66,68,1,0,69,71,1,0,72,74,1,0,75,77,1,0,78,80,1,0,
        81,83,1,0,84,86,1,0,87,89,1,0,90,92,1,0,93,95,1,0,96,98,1,0,102,
        104,1,0,108,110,2,0,51,51,111,112,1,0,113,114,2,0,186,186,190,190,
        1,0,116,117,2,0,119,120,169,169,1,0,122,123,2,0,28,28,190,190,2,
        0,184,184,186,186,1,0,149,176,2224,0,254,1,0,0,0,2,294,1,0,0,0,4,
        296,1,0,0,0,6,323,1,0,0,0,8,326,1,0,0,0,10,364,1,0,0,0,12,367,1,
        0,0,0,14,411,1,0,0,0,16,414,1,0,0,0,18,462,1,0,0,0,20,465,1,0,0,
        0,22,515,1,0,0,0,24,518,1,0,0,0,26,573,1,0,0,0,28,576,1,0,0,0,30,
        623,1,0,0,0,32,625,1,0,0,0,34,665,1,0,0,0,36,667,1,0,0,0,38,676,
        1,0,0,0,40,683,1,0,0,0,42,725,1,0,0,0,44,727,1,0,0,0,46,738,1,0,
        0,0,48,740,1,0,0,0,50,743,1,0,0,0,52,782,1,0,0,0,54,784,1,0,0,0,
        56,795,1,0,0,0,58,802,1,0,0,0,60,831,1,0,0,0,62,834,1,0,0,0,64,887,
        1,0,0,0,66,889,1,0,0,0,68,892,1,0,0,0,70,912,1,0,0,0,72,921,1,0,
        0,0,74,923,1,0,0,0,76,925,1,0,0,0,78,927,1,0,0,0,80,933,1,0,0,0,
        82,940,1,0,0,0,84,963,1,0,0,0,86,985,1,0,0,0,88,1020,1,0,0,0,90,
        1022,1,0,0,0,92,1049,1,0,0,0,94,1052,1,0,0,0,96,1084,1,0,0,0,98,
        1087,1,0,0,0,100,1130,1,0,0,0,102,1132,1,0,0,0,104,1134,1,0,0,0,
        106,1181,1,0,0,0,108,1183,1,0,0,0,110,1212,1,0,0,0,112,1214,1,0,
        0,0,114,1248,1,0,0,0,116,1250,1,0,0,0,118,1252,1,0,0,0,120,1298,
        1,0,0,0,122,1300,1,0,0,0,124,1304,1,0,0,0,126,1315,1,0,0,0,128,1327,
        1,0,0,0,130,1333,1,0,0,0,132,1337,1,0,0,0,134,1353,1,0,0,0,136,1355,
        1,0,0,0,138,1369,1,0,0,0,140,1371,1,0,0,0,142,1413,1,0,0,0,144,1415,
        1,0,0,0,146,1483,1,0,0,0,148,1531,1,0,0,0,150,1533,1,0,0,0,152,1581,
        1,0,0,0,154,1583,1,0,0,0,156,1585,1,0,0,0,158,1587,1,0,0,0,160,1594,
        1,0,0,0,162,1601,1,0,0,0,164,1606,1,0,0,0,166,1624,1,0,0,0,168,1629,
        1,0,0,0,170,1646,1,0,0,0,172,1668,1,0,0,0,174,1670,1,0,0,0,176,1675,
        1,0,0,0,178,1680,1,0,0,0,180,1684,1,0,0,0,182,1706,1,0,0,0,184,1719,
        1,0,0,0,186,1721,1,0,0,0,188,1732,1,0,0,0,190,1736,1,0,0,0,192,1747,
        1,0,0,0,194,1751,1,0,0,0,196,1755,1,0,0,0,198,1759,1,0,0,0,200,1769,
        1,0,0,0,202,1773,1,0,0,0,204,1796,1,0,0,0,206,1798,1,0,0,0,208,1801,
        1,0,0,0,210,1803,1,0,0,0,212,1806,1,0,0,0,214,1812,1,0,0,0,216,1821,
        1,0,0,0,218,1823,1,0,0,0,220,1836,1,0,0,0,222,1846,1,0,0,0,224,1852,
        1,0,0,0,226,1856,1,0,0,0,228,1858,1,0,0,0,230,1860,1,0,0,0,232,1862,
        1,0,0,0,234,1864,1,0,0,0,236,1874,1,0,0,0,238,1877,1,0,0,0,240,1880,
        1,0,0,0,242,1883,1,0,0,0,244,1910,1,0,0,0,246,1912,1,0,0,0,248,1914,
        1,0,0,0,250,253,3,184,92,0,251,253,5,196,0,0,252,250,1,0,0,0,252,
        251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,
        257,1,0,0,0,256,254,1,0,0,0,257,264,5,176,0,0,258,259,5,1,0,0,259,
        265,5,190,0,0,260,262,3,214,107,0,261,263,3,232,116,0,262,261,1,
        0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,258,1,0,0,0,264,260,1,
        0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,270,3,206,103,0,267,269,
        3,2,1,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,
        1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,277,3,208,104,0,274,
        276,5,196,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,
        278,1,0,0,0,278,1,1,0,0,0,279,277,1,0,0,0,280,295,3,220,110,0,281,
        295,3,184,92,0,282,283,5,177,0,0,283,284,3,214,107,0,284,285,5,196,
        0,0,285,295,1,0,0,0,286,287,5,158,0,0,287,288,3,232,116,0,288,289,
        5,196,0,0,289,295,1,0,0,0,290,295,3,4,2,0,291,295,3,58,29,0,292,
        295,3,132,66,0,293,295,5,196,0,0,294,280,1,0,0,0,294,281,1,0,0,0,
        294,282,1,0,0,0,294,286,1,0,0,0,294,290,1,0,0,0,294,291,1,0,0,0,
        294,292,1,0,0,0,294,293,1,0,0,0,295,3,1,0,0,0,296,301,5,164,0,0,
        297,299,3,214,107,0,298,300,3,232,116,0,299,298,1,0,0,0,299,300,
        1,0,0,0,300,302,1,0,0,0,301,297,1,0,0,0,301,302,1,0,0,0,302,303,
        1,0,0,0,303,307,3,206,103,0,304,306,3,6,3,0,305,304,1,0,0,0,306,
        309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,
        307,1,0,0,0,310,311,3,208,104,0,311,312,5,196,0,0,312,5,1,0,0,0,
        313,324,3,162,81,0,314,324,3,168,84,0,315,324,3,220,110,0,316,324,
        3,242,121,0,317,324,3,8,4,0,318,324,3,12,6,0,319,324,3,94,47,0,320,
        324,3,108,54,0,321,324,3,50,25,0,322,324,5,196,0,0,323,313,1,0,0,
        0,323,314,1,0,0,0,323,315,1,0,0,0,323,316,1,0,0,0,323,317,1,0,0,
        0,323,318,1,0,0,0,323,319,1,0,0,0,323,320,1,0,0,0,323,321,1,0,0,
        0,323,322,1,0,0,0,324,7,1,0,0,0,325,327,3,224,112,0,326,325,1,0,
        0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,5,165,0,0,329,334,3,
        214,107,0,330,332,3,232,116,0,331,333,3,234,117,0,332,331,1,0,0,
        0,332,333,1,0,0,0,333,335,1,0,0,0,334,330,1,0,0,0,334,335,1,0,0,
        0,335,345,1,0,0,0,336,340,3,206,103,0,337,339,3,10,5,0,338,337,1,
        0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,343,1,
        0,0,0,342,340,1,0,0,0,343,344,3,208,104,0,344,346,1,0,0,0,345,336,
        1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,5,196,0,0,348,9,
        1,0,0,0,349,350,5,158,0,0,350,351,3,232,116,0,351,352,5,196,0,0,
        352,365,1,0,0,0,353,354,5,173,0,0,354,355,3,234,117,0,355,356,5,
        196,0,0,356,365,1,0,0,0,357,358,3,238,119,0,358,359,5,196,0,0,359,
        365,1,0,0,0,360,365,3,220,110,0,361,365,3,54,27,0,362,365,3,50,25,
        0,363,365,5,196,0,0,364,349,1,0,0,0,364,353,1,0,0,0,364,357,1,0,
        0,0,364,360,1,0,0,0,364,361,1,0,0,0,364,362,1,0,0,0,364,363,1,0,
        0,0,365,11,1,0,0,0,366,368,3,224,112,0,367,366,1,0,0,0,367,368,1,
        0,0,0,368,369,1,0,0,0,369,370,5,169,0,0,370,375,3,214,107,0,371,
        373,3,232,116,0,372,374,3,234,117,0,373,372,1,0,0,0,373,374,1,0,
        0,0,374,376,1,0,0,0,375,371,1,0,0,0,375,376,1,0,0,0,376,386,1,0,
        0,0,377,381,3,206,103,0,378,380,3,14,7,0,379,378,1,0,0,0,380,383,
        1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,
        1,0,0,0,384,385,3,208,104,0,385,387,1,0,0,0,386,377,1,0,0,0,386,
        387,1,0,0,0,387,388,1,0,0,0,388,389,5,196,0,0,389,13,1,0,0,0,390,
        412,3,158,79,0,391,412,3,160,80,0,392,412,3,168,84,0,393,412,3,164,
        82,0,394,412,3,242,121,0,395,412,3,16,8,0,396,397,5,158,0,0,397,
        398,3,232,116,0,398,399,5,196,0,0,399,412,1,0,0,0,400,401,5,173,
        0,0,401,402,3,234,117,0,402,403,5,196,0,0,403,412,1,0,0,0,404,405,
        3,238,119,0,405,406,5,196,0,0,406,412,1,0,0,0,407,412,3,220,110,
        0,408,412,3,54,27,0,409,412,3,50,25,0,410,412,5,196,0,0,411,390,
        1,0,0,0,411,391,1,0,0,0,411,392,1,0,0,0,411,393,1,0,0,0,411,394,
        1,0,0,0,411,395,1,0,0,0,411,396,1,0,0,0,411,400,1,0,0,0,411,404,
        1,0,0,0,411,407,1,0,0,0,411,408,1,0,0,0,411,409,1,0,0,0,411,410,
        1,0,0,0,412,15,1,0,0,0,413,415,3,224,112,0,414,413,1,0,0,0,414,415,
        1,0,0,0,415,416,1,0,0,0,416,417,5,153,0,0,417,425,3,214,107,0,418,
        423,3,232,116,0,419,421,3,226,113,0,420,422,3,234,117,0,421,420,
        1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,419,1,0,0,0,423,424,
        1,0,0,0,424,426,1,0,0,0,425,418,1,0,0,0,425,426,1,0,0,0,426,436,
        1,0,0,0,427,431,3,206,103,0,428,430,3,18,9,0,429,428,1,0,0,0,430,
        433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,
        431,1,0,0,0,434,435,3,208,104,0,435,437,1,0,0,0,436,427,1,0,0,0,
        436,437,1,0,0,0,437,438,1,0,0,0,438,439,5,196,0,0,439,17,1,0,0,0,
        440,463,3,158,79,0,441,463,3,160,80,0,442,463,3,242,121,0,443,463,
        3,20,10,0,444,445,5,158,0,0,445,446,3,232,116,0,446,447,5,196,0,
        0,447,463,1,0,0,0,448,449,3,226,113,0,449,450,5,196,0,0,450,463,
        1,0,0,0,451,452,5,173,0,0,452,453,3,234,117,0,453,454,5,196,0,0,
        454,463,1,0,0,0,455,456,3,238,119,0,456,457,5,196,0,0,457,463,1,
        0,0,0,458,463,3,220,110,0,459,463,3,54,27,0,460,463,3,50,25,0,461,
        463,5,196,0,0,462,440,1,0,0,0,462,441,1,0,0,0,462,442,1,0,0,0,462,
        443,1,0,0,0,462,444,1,0,0,0,462,448,1,0,0,0,462,451,1,0,0,0,462,
        455,1,0,0,0,462,458,1,0,0,0,462,459,1,0,0,0,462,460,1,0,0,0,462,
        461,1,0,0,0,463,19,1,0,0,0,464,466,3,224,112,0,465,464,1,0,0,0,465,
        466,1,0,0,0,466,467,1,0,0,0,467,468,5,150,0,0,468,476,3,214,107,
        0,469,474,3,232,116,0,470,472,3,226,113,0,471,473,3,234,117,0,472,
        471,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,470,1,0,0,0,474,
        475,1,0,0,0,475,477,1,0,0,0,476,469,1,0,0,0,476,477,1,0,0,0,477,
        487,1,0,0,0,478,482,3,206,103,0,479,481,3,22,11,0,480,479,1,0,0,
        0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,
        0,484,482,1,0,0,0,485,486,3,208,104,0,486,488,1,0,0,0,487,478,1,
        0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,490,5,196,0,0,490,21,1,
        0,0,0,491,492,3,158,79,0,492,493,5,196,0,0,493,516,1,0,0,0,494,495,
        3,160,80,0,495,496,5,196,0,0,496,516,1,0,0,0,497,498,5,158,0,0,498,
        499,3,232,116,0,499,500,5,196,0,0,500,516,1,0,0,0,501,502,3,226,
        113,0,502,503,5,196,0,0,503,516,1,0,0,0,504,505,5,173,0,0,505,506,
        3,234,117,0,506,507,5,196,0,0,507,516,1,0,0,0,508,509,3,238,119,
        0,509,510,5,196,0,0,510,516,1,0,0,0,511,516,3,220,110,0,512,516,
        3,54,27,0,513,516,3,50,25,0,514,516,5,196,0,0,515,491,1,0,0,0,515,
        494,1,0,0,0,515,497,1,0,0,0,515,501,1,0,0,0,515,504,1,0,0,0,515,
        508,1,0,0,0,515,511,1,0,0,0,515,512,1,0,0,0,515,513,1,0,0,0,515,
        514,1,0,0,0,516,23,1,0,0,0,517,519,3,224,112,0,518,517,1,0,0,0,518,
        519,1,0,0,0,519,520,1,0,0,0,520,521,5,156,0,0,521,532,3,214,107,
        0,522,530,3,232,116,0,523,528,3,226,113,0,524,526,3,234,117,0,525,
        527,7,0,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,
        524,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,523,1,0,0,0,530,
        531,1,0,0,0,531,533,1,0,0,0,532,522,1,0,0,0,532,533,1,0,0,0,533,
        543,1,0,0,0,534,538,3,206,103,0,535,537,3,26,13,0,536,535,1,0,0,
        0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,541,1,0,0,
        0,540,538,1,0,0,0,541,542,3,208,104,0,542,544,1,0,0,0,543,534,1,
        0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,196,0,0,546,25,1,
        0,0,0,547,574,3,242,121,0,548,574,3,24,12,0,549,574,3,28,14,0,550,
        574,3,32,16,0,551,574,3,40,20,0,552,574,3,50,25,0,553,554,5,158,
        0,0,554,555,3,232,116,0,555,556,5,196,0,0,556,574,1,0,0,0,557,558,
        3,226,113,0,558,559,5,196,0,0,559,574,1,0,0,0,560,561,3,210,105,
        0,561,562,5,196,0,0,562,574,1,0,0,0,563,564,5,173,0,0,564,565,3,
        234,117,0,565,566,5,196,0,0,566,574,1,0,0,0,567,568,3,238,119,0,
        568,569,5,196,0,0,569,574,1,0,0,0,570,574,3,220,110,0,571,574,3,
        54,27,0,572,574,5,196,0,0,573,547,1,0,0,0,573,548,1,0,0,0,573,549,
        1,0,0,0,573,550,1,0,0,0,573,551,1,0,0,0,573,552,1,0,0,0,573,553,
        1,0,0,0,573,557,1,0,0,0,573,560,1,0,0,0,573,563,1,0,0,0,573,567,
        1,0,0,0,573,570,1,0,0,0,573,571,1,0,0,0,573,572,1,0,0,0,574,27,1,
        0,0,0,575,577,3,224,112,0,576,575,1,0,0,0,576,577,1,0,0,0,577,578,
        1,0,0,0,578,579,5,163,0,0,579,587,3,214,107,0,580,585,3,232,116,
        0,581,583,3,226,113,0,582,584,3,234,117,0,583,582,1,0,0,0,583,584,
        1,0,0,0,584,586,1,0,0,0,585,581,1,0,0,0,585,586,1,0,0,0,586,588,
        1,0,0,0,587,580,1,0,0,0,587,588,1,0,0,0,588,598,1,0,0,0,589,593,
        3,206,103,0,590,592,3,30,15,0,591,590,1,0,0,0,592,595,1,0,0,0,593,
        591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,0,0,0,596,
        597,3,208,104,0,597,599,1,0,0,0,598,589,1,0,0,0,598,599,1,0,0,0,
        599,600,1,0,0,0,600,601,5,196,0,0,601,29,1,0,0,0,602,624,3,50,25,
        0,603,604,5,158,0,0,604,605,3,232,116,0,605,606,5,196,0,0,606,624,
        1,0,0,0,607,608,3,226,113,0,608,609,5,196,0,0,609,624,1,0,0,0,610,
        611,3,102,51,0,611,612,5,196,0,0,612,624,1,0,0,0,613,614,5,173,0,
        0,614,615,3,234,117,0,615,616,5,196,0,0,616,624,1,0,0,0,617,618,
        3,238,119,0,618,619,5,196,0,0,619,624,1,0,0,0,620,624,3,220,110,
        0,621,624,3,54,27,0,622,624,5,196,0,0,623,602,1,0,0,0,623,603,1,
        0,0,0,623,607,1,0,0,0,623,610,1,0,0,0,623,613,1,0,0,0,623,617,1,
        0,0,0,623,620,1,0,0,0,623,621,1,0,0,0,623,622,1,0,0,0,624,31,1,0,
        0,0,625,626,5,168,0,0,626,631,3,214,107,0,627,629,3,36,18,0,628,
        630,3,234,117,0,629,628,1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,
        631,627,1,0,0,0,631,632,1,0,0,0,632,642,1,0,0,0,633,637,3,206,103,
        0,634,636,3,34,17,0,635,634,1,0,0,0,636,639,1,0,0,0,637,635,1,0,
        0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,641,3,208,
        104,0,641,643,1,0,0,0,642,633,1,0,0,0,642,643,1,0,0,0,643,644,1,
        0,0,0,644,645,5,196,0,0,645,33,1,0,0,0,646,647,5,158,0,0,647,648,
        3,232,116,0,648,649,5,196,0,0,649,666,1,0,0,0,650,651,5,173,0,0,
        651,652,3,234,117,0,652,653,5,196,0,0,653,666,1,0,0,0,654,666,3,
        50,25,0,655,656,3,238,119,0,656,657,5,196,0,0,657,666,1,0,0,0,658,
        666,3,220,110,0,659,666,3,54,27,0,660,666,3,44,22,0,661,662,3,102,
        51,0,662,663,5,196,0,0,663,666,1,0,0,0,664,666,5,196,0,0,665,646,
        1,0,0,0,665,650,1,0,0,0,665,654,1,0,0,0,665,655,1,0,0,0,665,658,
        1,0,0,0,665,659,1,0,0,0,665,660,1,0,0,0,665,661,1,0,0,0,665,664,
        1,0,0,0,666,35,1,0,0,0,667,672,3,214,107,0,668,669,5,194,0,0,669,
        671,3,214,107,0,670,668,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,
        672,673,1,0,0,0,673,37,1,0,0,0,674,672,1,0,0,0,675,677,3,224,112,
        0,676,675,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,679,5,155,
        0,0,679,680,3,214,107,0,680,681,5,196,0,0,681,39,1,0,0,0,682,684,
        3,224,112,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,
        686,5,152,0,0,686,691,3,214,107,0,687,689,3,36,18,0,688,690,3,234,
        117,0,689,688,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,687,1,
        0,0,0,691,692,1,0,0,0,692,702,1,0,0,0,693,697,3,206,103,0,694,696,
        3,42,21,0,695,694,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,0,697,698,
        1,0,0,0,698,700,1,0,0,0,699,697,1,0,0,0,700,701,3,208,104,0,701,
        703,1,0,0,0,702,693,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,
        705,5,196,0,0,705,41,1,0,0,0,706,707,5,158,0,0,707,708,3,232,116,
        0,708,709,5,196,0,0,709,726,1,0,0,0,710,711,5,173,0,0,711,712,3,
        234,117,0,712,713,5,196,0,0,713,726,1,0,0,0,714,726,3,50,25,0,715,
        716,3,238,119,0,716,717,5,196,0,0,717,726,1,0,0,0,718,726,3,220,
        110,0,719,726,3,54,27,0,720,726,3,44,22,0,721,722,3,102,51,0,722,
        723,5,196,0,0,723,726,1,0,0,0,724,726,5,196,0,0,725,706,1,0,0,0,
        725,710,1,0,0,0,725,714,1,0,0,0,725,715,1,0,0,0,725,718,1,0,0,0,
        725,719,1,0,0,0,725,720,1,0,0,0,725,721,1,0,0,0,725,724,1,0,0,0,
        726,43,1,0,0,0,727,728,5,2,0,0,728,729,3,214,107,0,729,734,5,190,
        0,0,730,732,3,46,23,0,731,733,3,48,24,0,732,731,1,0,0,0,732,733,
        1,0,0,0,733,735,1,0,0,0,734,730,1,0,0,0,734,735,1,0,0,0,735,736,
        1,0,0,0,736,737,5,196,0,0,737,45,1,0,0,0,738,739,5,182,0,0,739,47,
        1,0,0,0,740,741,5,182,0,0,741,49,1,0,0,0,742,744,3,214,107,0,743,
        742,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,746,5,178,0,0,746,
        754,3,214,107,0,747,752,3,232,116,0,748,750,3,226,113,0,749,751,
        3,234,117,0,750,749,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,
        748,1,0,0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,747,1,0,0,0,754,
        755,1,0,0,0,755,765,1,0,0,0,756,760,3,206,103,0,757,759,3,52,26,
        0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,
        0,761,763,1,0,0,0,762,760,1,0,0,0,763,764,3,208,104,0,764,766,1,
        0,0,0,765,756,1,0,0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,768,5,
        196,0,0,768,51,1,0,0,0,769,770,5,173,0,0,770,771,3,234,117,0,771,
        772,5,196,0,0,772,783,1,0,0,0,773,774,3,238,119,0,774,775,5,196,
        0,0,775,783,1,0,0,0,776,783,3,220,110,0,777,783,3,54,27,0,778,779,
        3,102,51,0,779,780,5,196,0,0,780,783,1,0,0,0,781,783,5,196,0,0,782,
        769,1,0,0,0,782,773,1,0,0,0,782,776,1,0,0,0,782,777,1,0,0,0,782,
        778,1,0,0,0,782,781,1,0,0,0,783,53,1,0,0,0,784,785,5,166,0,0,785,
        789,3,206,103,0,786,788,3,56,28,0,787,786,1,0,0,0,788,791,1,0,0,
        0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,
        0,792,793,3,208,104,0,793,794,5,196,0,0,794,55,1,0,0,0,795,796,3,
        214,107,0,796,798,3,232,116,0,797,799,3,216,108,0,798,797,1,0,0,
        0,798,799,1,0,0,0,799,800,1,0,0,0,800,801,5,196,0,0,801,57,1,0,0,
        0,802,803,5,175,0,0,803,807,3,206,103,0,804,806,3,60,30,0,805,804,
        1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,810,
        1,0,0,0,809,807,1,0,0,0,810,811,3,208,104,0,811,812,5,196,0,0,812,
        59,1,0,0,0,813,832,3,62,31,0,814,832,3,68,34,0,815,832,3,82,41,0,
        816,832,3,84,42,0,817,832,3,86,43,0,818,832,3,118,59,0,819,832,3,
        112,56,0,820,832,3,90,45,0,821,832,3,98,49,0,822,832,3,140,70,0,
        823,832,3,104,52,0,824,832,3,136,68,0,825,832,3,200,100,0,826,832,
        3,198,99,0,827,832,3,202,101,0,828,832,3,186,93,0,829,832,3,220,
        110,0,830,832,5,196,0,0,831,813,1,0,0,0,831,814,1,0,0,0,831,815,
        1,0,0,0,831,816,1,0,0,0,831,817,1,0,0,0,831,818,1,0,0,0,831,819,
        1,0,0,0,831,820,1,0,0,0,831,821,1,0,0,0,831,822,1,0,0,0,831,823,
        1,0,0,0,831,824,1,0,0,0,831,825,1,0,0,0,831,826,1,0,0,0,831,827,
        1,0,0,0,831,828,1,0,0,0,831,829,1,0,0,0,831,830,1,0,0,0,832,61,1,
        0,0,0,833,835,3,224,112,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,
        1,0,0,0,836,838,5,172,0,0,837,839,3,230,115,0,838,837,1,0,0,0,838,
        839,1,0,0,0,839,841,1,0,0,0,840,842,3,232,116,0,841,840,1,0,0,0,
        841,842,1,0,0,0,842,843,1,0,0,0,843,847,3,206,103,0,844,846,3,64,
        32,0,845,844,1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,
        0,0,848,850,1,0,0,0,849,847,1,0,0,0,850,851,3,208,104,0,851,852,
        5,196,0,0,852,63,1,0,0,0,853,854,3,78,39,0,854,855,5,196,0,0,855,
        888,1,0,0,0,856,857,3,80,40,0,857,858,5,196,0,0,858,859,5,3,0,0,
        859,860,3,216,108,0,860,861,5,196,0,0,861,888,1,0,0,0,862,863,3,
        236,118,0,863,864,5,196,0,0,864,888,1,0,0,0,865,888,3,220,110,0,
        866,867,3,66,33,0,867,868,5,196,0,0,868,888,1,0,0,0,869,870,5,158,
        0,0,870,871,3,232,116,0,871,872,5,196,0,0,872,888,1,0,0,0,873,874,
        3,130,65,0,874,875,5,196,0,0,875,888,1,0,0,0,876,877,3,70,35,0,877,
        878,5,196,0,0,878,888,1,0,0,0,879,880,3,76,38,0,880,881,5,196,0,
        0,881,888,1,0,0,0,882,888,3,50,25,0,883,888,3,126,63,0,884,888,3,
        200,100,0,885,888,3,198,99,0,886,888,5,196,0,0,887,853,1,0,0,0,887,
        856,1,0,0,0,887,862,1,0,0,0,887,865,1,0,0,0,887,866,1,0,0,0,887,
        869,1,0,0,0,887,873,1,0,0,0,887,876,1,0,0,0,887,879,1,0,0,0,887,
        882,1,0,0,0,887,883,1,0,0,0,887,884,1,0,0,0,887,885,1,0,0,0,887,
        886,1,0,0,0,888,65,1,0,0,0,889,890,7,1,0,0,890,67,1,0,0,0,891,893,
        3,224,112,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,
        895,5,171,0,0,895,900,3,214,107,0,896,898,3,230,115,0,897,899,3,
        232,116,0,898,897,1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,896,
        1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,906,3,206,103,0,903,
        905,3,64,32,0,904,903,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,
        907,1,0,0,0,907,909,1,0,0,0,908,906,1,0,0,0,909,910,3,208,104,0,
        910,911,5,196,0,0,911,69,1,0,0,0,912,914,5,149,0,0,913,915,7,2,0,
        0,914,913,1,0,0,0,914,915,1,0,0,0,915,919,1,0,0,0,916,917,3,72,36,
        0,917,918,3,74,37,0,918,920,1,0,0,0,919,916,1,0,0,0,919,920,1,0,
        0,0,920,71,1,0,0,0,921,922,5,182,0,0,922,73,1,0,0,0,923,924,5,182,
        0,0,924,75,1,0,0,0,925,926,5,28,0,0,926,77,1,0,0,0,927,929,5,29,
        0,0,928,930,7,3,0,0,929,928,1,0,0,0,930,931,1,0,0,0,931,929,1,0,
        0,0,931,932,1,0,0,0,932,79,1,0,0,0,933,935,5,31,0,0,934,936,5,186,
        0,0,935,934,1,0,0,0,936,937,1,0,0,0,937,935,1,0,0,0,937,938,1,0,
        0,0,938,81,1,0,0,0,939,941,3,224,112,0,940,939,1,0,0,0,940,941,1,
        0,0,0,941,942,1,0,0,0,942,944,5,153,0,0,943,945,3,214,107,0,944,
        943,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,948,3,230,115,0,
        947,946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,951,3,232,116,
        0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,956,3,206,
        103,0,953,955,3,64,32,0,954,953,1,0,0,0,955,958,1,0,0,0,956,954,
        1,0,0,0,956,957,1,0,0,0,957,959,1,0,0,0,958,956,1,0,0,0,959,960,
        3,208,104,0,960,961,5,196,0,0,961,83,1,0,0,0,962,964,3,224,112,0,
        963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,967,5,150,0,
        0,966,968,3,214,107,0,967,966,1,0,0,0,967,968,1,0,0,0,968,970,1,
        0,0,0,969,971,3,230,115,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,
        1,0,0,0,972,974,3,232,116,0,973,972,1,0,0,0,973,974,1,0,0,0,974,
        975,1,0,0,0,975,979,3,206,103,0,976,978,3,64,32,0,977,976,1,0,0,
        0,978,981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,
        0,981,979,1,0,0,0,982,983,3,208,104,0,983,984,5,196,0,0,984,85,1,
        0,0,0,985,986,5,32,0,0,986,989,3,230,115,0,987,990,3,78,39,0,988,
        990,3,80,40,0,989,987,1,0,0,0,989,988,1,0,0,0,990,991,1,0,0,0,991,
        996,3,234,117,0,992,994,3,230,115,0,993,995,3,232,116,0,994,993,
        1,0,0,0,994,995,1,0,0,0,995,997,1,0,0,0,996,992,1,0,0,0,996,997,
        1,0,0,0,997,998,1,0,0,0,998,1002,3,206,103,0,999,1001,3,88,44,0,
        1000,999,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,
        0,0,0,1003,1005,1,0,0,0,1004,1002,1,0,0,0,1005,1006,3,208,104,0,
        1006,1007,5,196,0,0,1007,87,1,0,0,0,1008,1009,3,76,38,0,1009,1010,
        5,196,0,0,1010,1021,1,0,0,0,1011,1012,3,236,118,0,1012,1013,5,196,
        0,0,1013,1021,1,0,0,0,1014,1015,5,158,0,0,1015,1016,3,232,116,0,
        1016,1017,5,196,0,0,1017,1021,1,0,0,0,1018,1021,3,220,110,0,1019,
        1021,5,196,0,0,1020,1008,1,0,0,0,1020,1011,1,0,0,0,1020,1014,1,0,
        0,0,1020,1018,1,0,0,0,1020,1019,1,0,0,0,1021,89,1,0,0,0,1022,1024,
        5,33,0,0,1023,1025,7,4,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,
        1030,1,0,0,0,1026,1028,3,230,115,0,1027,1029,3,232,116,0,1028,1027,
        1,0,0,0,1028,1029,1,0,0,0,1029,1031,1,0,0,0,1030,1026,1,0,0,0,1030,
        1031,1,0,0,0,1031,1032,1,0,0,0,1032,1036,3,206,103,0,1033,1035,3,
        92,46,0,1034,1033,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,
        1037,1,0,0,0,1037,1039,1,0,0,0,1038,1036,1,0,0,0,1039,1040,3,208,
        104,0,1040,1041,5,196,0,0,1041,91,1,0,0,0,1042,1050,3,50,25,0,1043,
        1050,3,214,107,0,1044,1045,5,158,0,0,1045,1046,3,232,116,0,1046,
        1047,5,196,0,0,1047,1050,1,0,0,0,1048,1050,5,196,0,0,1049,1042,1,
        0,0,0,1049,1043,1,0,0,0,1049,1044,1,0,0,0,1049,1048,1,0,0,0,1050,
        93,1,0,0,0,1051,1053,3,224,112,0,1052,1051,1,0,0,0,1052,1053,1,0,
        0,0,1053,1054,1,0,0,0,1054,1055,5,154,0,0,1055,1060,3,214,107,0,
        1056,1058,3,230,115,0,1057,1059,3,232,116,0,1058,1057,1,0,0,0,1058,
        1059,1,0,0,0,1059,1061,1,0,0,0,1060,1056,1,0,0,0,1060,1061,1,0,0,
        0,1061,1071,1,0,0,0,1062,1066,3,206,103,0,1063,1065,3,96,48,0,1064,
        1063,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,
        0,1067,1069,1,0,0,0,1068,1066,1,0,0,0,1069,1070,3,208,104,0,1070,
        1072,1,0,0,0,1071,1062,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,
        0,1073,1074,5,196,0,0,1074,95,1,0,0,0,1075,1076,5,173,0,0,1076,1077,
        3,234,117,0,1077,1078,5,196,0,0,1078,1085,1,0,0,0,1079,1085,3,24,
        12,0,1080,1085,3,38,19,0,1081,1085,3,28,14,0,1082,1085,3,50,25,0,
        1083,1085,5,196,0,0,1084,1075,1,0,0,0,1084,1079,1,0,0,0,1084,1080,
        1,0,0,0,1084,1081,1,0,0,0,1084,1082,1,0,0,0,1084,1083,1,0,0,0,1085,
        97,1,0,0,0,1086,1088,3,224,112,0,1087,1086,1,0,0,0,1087,1088,1,0,
        0,0,1088,1089,1,0,0,0,1089,1090,5,157,0,0,1090,1091,7,4,0,0,1091,
        1096,3,102,51,0,1092,1094,3,230,115,0,1093,1095,3,232,116,0,1094,
        1093,1,0,0,0,1094,1095,1,0,0,0,1095,1097,1,0,0,0,1096,1092,1,0,0,
        0,1096,1097,1,0,0,0,1097,1107,1,0,0,0,1098,1102,3,206,103,0,1099,
        1101,3,100,50,0,1100,1099,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,
        0,0,0,1102,1103,1,0,0,0,1103,1105,1,0,0,0,1104,1102,1,0,0,0,1105,
        1106,3,208,104,0,1106,1108,1,0,0,0,1107,1098,1,0,0,0,1107,1108,1,
        0,0,0,1108,1109,1,0,0,0,1109,1110,5,196,0,0,1110,99,1,0,0,0,1111,
        1112,5,173,0,0,1112,1113,3,234,117,0,1113,1114,5,196,0,0,1114,1131,
        1,0,0,0,1115,1131,3,24,12,0,1116,1131,3,28,14,0,1117,1131,3,50,25,
        0,1118,1119,5,158,0,0,1119,1120,3,232,116,0,1120,1121,5,196,0,0,
        1121,1131,1,0,0,0,1122,1123,3,78,39,0,1123,1124,5,196,0,0,1124,1131,
        1,0,0,0,1125,1126,3,70,35,0,1126,1127,5,196,0,0,1127,1131,1,0,0,
        0,1128,1131,3,126,63,0,1129,1131,5,196,0,0,1130,1111,1,0,0,0,1130,
        1115,1,0,0,0,1130,1116,1,0,0,0,1130,1117,1,0,0,0,1130,1118,1,0,0,
        0,1130,1122,1,0,0,0,1130,1125,1,0,0,0,1130,1128,1,0,0,0,1130,1129,
        1,0,0,0,1131,101,1,0,0,0,1132,1133,3,214,107,0,1133,103,1,0,0,0,
        1134,1137,5,162,0,0,1135,1138,5,30,0,0,1136,1138,3,214,107,0,1137,
        1135,1,0,0,0,1137,1136,1,0,0,0,1138,1140,1,0,0,0,1139,1141,3,230,
        115,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1151,1,0,0,0,1142,
        1146,3,206,103,0,1143,1145,3,106,53,0,1144,1143,1,0,0,0,1145,1148,
        1,0,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,1149,1,0,0,0,1148,
        1146,1,0,0,0,1149,1150,3,208,104,0,1150,1152,1,0,0,0,1151,1142,1,
        0,0,0,1151,1152,1,0,0,0,1152,1153,1,0,0,0,1153,1154,5,196,0,0,1154,
        105,1,0,0,0,1155,1156,5,34,0,0,1156,1157,5,190,0,0,1157,1182,5,196,
        0,0,1158,1159,5,35,0,0,1159,1160,5,190,0,0,1160,1182,5,196,0,0,1161,
        1162,5,36,0,0,1162,1163,3,216,108,0,1163,1164,5,190,0,0,1164,1165,
        5,196,0,0,1165,1182,1,0,0,0,1166,1167,5,162,0,0,1167,1168,5,190,
        0,0,1168,1182,5,196,0,0,1169,1170,3,76,38,0,1170,1171,5,196,0,0,
        1171,1182,1,0,0,0,1172,1173,3,236,118,0,1173,1174,5,196,0,0,1174,
        1182,1,0,0,0,1175,1176,5,158,0,0,1176,1177,3,232,116,0,1177,1178,
        5,196,0,0,1178,1182,1,0,0,0,1179,1182,3,220,110,0,1180,1182,5,196,
        0,0,1181,1155,1,0,0,0,1181,1158,1,0,0,0,1181,1161,1,0,0,0,1181,1166,
        1,0,0,0,1181,1169,1,0,0,0,1181,1172,1,0,0,0,1181,1175,1,0,0,0,1181,
        1179,1,0,0,0,1181,1180,1,0,0,0,1182,107,1,0,0,0,1183,1184,5,160,
        0,0,1184,1189,3,214,107,0,1185,1187,3,232,116,0,1186,1188,3,234,
        117,0,1187,1186,1,0,0,0,1187,1188,1,0,0,0,1188,1190,1,0,0,0,1189,
        1185,1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1195,3,206,
        103,0,1192,1194,3,110,55,0,1193,1192,1,0,0,0,1194,1197,1,0,0,0,1195,
        1193,1,0,0,0,1195,1196,1,0,0,0,1196,1198,1,0,0,0,1197,1195,1,0,0,
        0,1198,1199,3,208,104,0,1199,1200,5,196,0,0,1200,109,1,0,0,0,1201,
        1202,5,158,0,0,1202,1203,3,232,116,0,1203,1204,5,196,0,0,1204,1213,
        1,0,0,0,1205,1206,3,234,117,0,1206,1207,5,196,0,0,1207,1213,1,0,
        0,0,1208,1213,3,220,110,0,1209,1213,3,54,27,0,1210,1213,3,50,25,
        0,1211,1213,5,196,0,0,1212,1201,1,0,0,0,1212,1205,1,0,0,0,1212,1208,
        1,0,0,0,1212,1209,1,0,0,0,1212,1210,1,0,0,0,1212,1211,1,0,0,0,1213,
        111,1,0,0,0,1214,1215,5,159,0,0,1215,1223,3,214,107,0,1216,1221,
        3,116,58,0,1217,1219,3,232,116,0,1218,1220,3,234,117,0,1219,1218,
        1,0,0,0,1219,1220,1,0,0,0,1220,1222,1,0,0,0,1221,1217,1,0,0,0,1221,
        1222,1,0,0,0,1222,1224,1,0,0,0,1223,1216,1,0,0,0,1223,1224,1,0,0,
        0,1224,1225,1,0,0,0,1225,1229,3,206,103,0,1226,1228,3,114,57,0,1227,
        1226,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,
        0,1230,1232,1,0,0,0,1231,1229,1,0,0,0,1232,1233,3,208,104,0,1233,
        1234,5,196,0,0,1234,113,1,0,0,0,1235,1236,3,78,39,0,1236,1237,5,
        196,0,0,1237,1249,1,0,0,0,1238,1239,5,37,0,0,1239,1240,5,186,0,0,
        1240,1249,5,196,0,0,1241,1242,5,38,0,0,1242,1243,5,182,0,0,1243,
        1249,5,196,0,0,1244,1245,5,39,0,0,1245,1246,5,182,0,0,1246,1249,
        5,196,0,0,1247,1249,5,196,0,0,1248,1235,1,0,0,0,1248,1238,1,0,0,
        0,1248,1241,1,0,0,0,1248,1244,1,0,0,0,1248,1247,1,0,0,0,1249,115,
        1,0,0,0,1250,1251,5,179,0,0,1251,117,1,0,0,0,1252,1253,5,167,0,0,
        1253,1258,3,214,107,0,1254,1256,3,232,116,0,1255,1257,3,234,117,
        0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1259,1,0,0,0,1258,1254,
        1,0,0,0,1258,1259,1,0,0,0,1259,1260,1,0,0,0,1260,1264,3,206,103,
        0,1261,1263,3,120,60,0,1262,1261,1,0,0,0,1263,1266,1,0,0,0,1264,
        1262,1,0,0,0,1264,1265,1,0,0,0,1265,1267,1,0,0,0,1266,1264,1,0,0,
        0,1267,1268,3,208,104,0,1268,1269,5,196,0,0,1269,119,1,0,0,0,1270,
        1271,5,40,0,0,1271,1272,3,234,117,0,1272,1273,5,196,0,0,1273,1299,
        1,0,0,0,1274,1275,5,158,0,0,1275,1276,3,232,116,0,1276,1277,5,196,
        0,0,1277,1299,1,0,0,0,1278,1279,5,41,0,0,1279,1299,5,179,0,0,1280,
        1281,5,3,0,0,1281,1282,5,182,0,0,1282,1299,5,196,0,0,1283,1284,5,
        42,0,0,1284,1285,3,124,62,0,1285,1286,5,196,0,0,1286,1299,1,0,0,
        0,1287,1288,5,43,0,0,1288,1289,3,154,77,0,1289,1290,5,196,0,0,1290,
        1299,1,0,0,0,1291,1292,5,44,0,0,1292,1293,5,182,0,0,1293,1299,5,
        196,0,0,1294,1295,5,45,0,0,1295,1296,5,182,0,0,1296,1299,5,196,0,
        0,1297,1299,5,196,0,0,1298,1270,1,0,0,0,1298,1274,1,0,0,0,1298,1278,
        1,0,0,0,1298,1280,1,0,0,0,1298,1283,1,0,0,0,1298,1287,1,0,0,0,1298,
        1291,1,0,0,0,1298,1294,1,0,0,0,1298,1297,1,0,0,0,1299,121,1,0,0,
        0,1300,1301,5,182,0,0,1301,1302,5,194,0,0,1302,1303,5,182,0,0,1303,
        123,1,0,0,0,1304,1305,5,191,0,0,1305,1310,3,122,61,0,1306,1307,5,
        193,0,0,1307,1309,3,122,61,0,1308,1306,1,0,0,0,1309,1312,1,0,0,0,
        1310,1308,1,0,0,0,1310,1311,1,0,0,0,1311,1313,1,0,0,0,1312,1310,
        1,0,0,0,1313,1314,5,192,0,0,1314,125,1,0,0,0,1315,1316,5,46,0,0,
        1316,1320,3,206,103,0,1317,1319,3,128,64,0,1318,1317,1,0,0,0,1319,
        1322,1,0,0,0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,1321,1323,1,0,0,
        0,1322,1320,1,0,0,0,1323,1324,3,208,104,0,1324,1325,5,196,0,0,1325,
        127,1,0,0,0,1326,1328,5,186,0,0,1327,1326,1,0,0,0,1328,1329,1,0,
        0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,1331,1,0,0,0,1331,1332,
        5,196,0,0,1332,129,1,0,0,0,1333,1334,5,47,0,0,1334,1335,5,185,0,
        0,1335,1336,5,185,0,0,1336,131,1,0,0,0,1337,1338,5,151,0,0,1338,
        1342,3,206,103,0,1339,1341,3,134,67,0,1340,1339,1,0,0,0,1341,1344,
        1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,
        1342,1,0,0,0,1345,1346,3,208,104,0,1346,1347,5,196,0,0,1347,133,
        1,0,0,0,1348,1354,3,194,97,0,1349,1354,3,196,98,0,1350,1354,3,190,
        95,0,1351,1354,3,220,110,0,1352,1354,5,196,0,0,1353,1348,1,0,0,0,
        1353,1349,1,0,0,0,1353,1350,1,0,0,0,1353,1351,1,0,0,0,1353,1352,
        1,0,0,0,1354,135,1,0,0,0,1355,1356,5,170,0,0,1356,1360,3,206,103,
        0,1357,1359,3,138,69,0,1358,1357,1,0,0,0,1359,1362,1,0,0,0,1360,
        1358,1,0,0,0,1360,1361,1,0,0,0,1361,1363,1,0,0,0,1362,1360,1,0,0,
        0,1363,1364,3,208,104,0,1364,1365,5,196,0,0,1365,137,1,0,0,0,1366,
        1370,3,144,72,0,1367,1370,3,150,75,0,1368,1370,5,196,0,0,1369,1366,
        1,0,0,0,1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,139,1,0,0,0,1371,
        1379,5,48,0,0,1372,1377,3,230,115,0,1373,1375,3,236,118,0,1374,1376,
        3,232,116,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,1378,1,0,0,
        0,1377,1373,1,0,0,0,1377,1378,1,0,0,0,1378,1380,1,0,0,0,1379,1372,
        1,0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,1385,3,206,103,
        0,1382,1384,3,142,71,0,1383,1382,1,0,0,0,1384,1387,1,0,0,0,1385,
        1383,1,0,0,0,1385,1386,1,0,0,0,1386,1388,1,0,0,0,1387,1385,1,0,0,
        0,1388,1389,3,208,104,0,1389,1390,5,196,0,0,1390,141,1,0,0,0,1391,
        1392,3,78,39,0,1392,1393,5,196,0,0,1393,1414,1,0,0,0,1394,1395,3,
        80,40,0,1395,1396,5,196,0,0,1396,1414,1,0,0,0,1397,1398,3,70,35,
        0,1398,1399,5,196,0,0,1399,1414,1,0,0,0,1400,1401,3,76,38,0,1401,
        1402,5,196,0,0,1402,1414,1,0,0,0,1403,1414,3,126,63,0,1404,1405,
        3,236,118,0,1405,1406,5,196,0,0,1406,1414,1,0,0,0,1407,1408,5,158,
        0,0,1408,1409,3,232,116,0,1409,1410,5,196,0,0,1410,1414,1,0,0,0,
        1411,1414,3,220,110,0,1412,1414,5,196,0,0,1413,1391,1,0,0,0,1413,
        1394,1,0,0,0,1413,1397,1,0,0,0,1413,1400,1,0,0,0,1413,1403,1,0,0,
        0,1413,1404,1,0,0,0,1413,1407,1,0,0,0,1413,1411,1,0,0,0,1413,1412,
        1,0,0,0,1414,143,1,0,0,0,1415,1416,5,160,0,0,1416,1417,3,228,114,
        0,1417,1421,3,206,103,0,1418,1420,3,146,73,0,1419,1418,1,0,0,0,1420,
        1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1424,1,0,0,
        0,1423,1421,1,0,0,0,1424,1425,3,208,104,0,1425,1426,5,196,0,0,1426,
        145,1,0,0,0,1427,1428,5,49,0,0,1428,1429,5,182,0,0,1429,1484,5,196,
        0,0,1430,1431,5,50,0,0,1431,1432,3,148,74,0,1432,1433,5,196,0,0,
        1433,1484,1,0,0,0,1434,1435,5,51,0,0,1435,1436,5,179,0,0,1436,1484,
        5,196,0,0,1437,1438,5,52,0,0,1438,1439,5,190,0,0,1439,1484,5,196,
        0,0,1440,1441,5,53,0,0,1441,1442,5,182,0,0,1442,1484,5,196,0,0,1443,
        1444,5,54,0,0,1444,1445,5,182,0,0,1445,1484,5,196,0,0,1446,1447,
        5,55,0,0,1447,1448,3,216,108,0,1448,1449,5,196,0,0,1449,1484,1,0,
        0,0,1450,1451,5,56,0,0,1451,1452,3,216,108,0,1452,1453,5,196,0,0,
        1453,1484,1,0,0,0,1454,1455,5,57,0,0,1455,1456,3,216,108,0,1456,
        1457,5,196,0,0,1457,1484,1,0,0,0,1458,1459,5,58,0,0,1459,1460,3,
        216,108,0,1460,1461,5,196,0,0,1461,1484,1,0,0,0,1462,1463,5,59,0,
        0,1463,1464,5,182,0,0,1464,1484,5,196,0,0,1465,1466,5,60,0,0,1466,
        1467,5,182,0,0,1467,1484,5,196,0,0,1468,1469,5,61,0,0,1469,1470,
        3,156,78,0,1470,1471,5,196,0,0,1471,1484,1,0,0,0,1472,1473,5,49,
        0,0,1473,1474,5,182,0,0,1474,1484,5,196,0,0,1475,1476,5,62,0,0,1476,
        1477,5,179,0,0,1477,1484,5,196,0,0,1478,1479,5,158,0,0,1479,1480,
        5,179,0,0,1480,1484,5,196,0,0,1481,1484,3,220,110,0,1482,1484,5,
        196,0,0,1483,1427,1,0,0,0,1483,1430,1,0,0,0,1483,1434,1,0,0,0,1483,
        1437,1,0,0,0,1483,1440,1,0,0,0,1483,1443,1,0,0,0,1483,1446,1,0,0,
        0,1483,1450,1,0,0,0,1483,1454,1,0,0,0,1483,1458,1,0,0,0,1483,1462,
        1,0,0,0,1483,1465,1,0,0,0,1483,1468,1,0,0,0,1483,1472,1,0,0,0,1483,
        1475,1,0,0,0,1483,1478,1,0,0,0,1483,1481,1,0,0,0,1483,1482,1,0,0,
        0,1484,147,1,0,0,0,1485,1487,7,5,0,0,1486,1485,1,0,0,0,1486,1487,
        1,0,0,0,1487,1532,1,0,0,0,1488,1490,7,6,0,0,1489,1488,1,0,0,0,1489,
        1490,1,0,0,0,1490,1532,1,0,0,0,1491,1532,5,150,0,0,1492,1494,7,7,
        0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,1532,1,0,0,0,1495,1497,
        7,8,0,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1532,1,0,0,0,1498,
        1500,7,9,0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1532,1,0,0,
        0,1501,1503,7,10,0,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1532,
        1,0,0,0,1504,1506,7,11,0,0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,
        1532,1,0,0,0,1507,1509,7,12,0,0,1508,1507,1,0,0,0,1508,1509,1,0,
        0,0,1509,1532,1,0,0,0,1510,1512,7,13,0,0,1511,1510,1,0,0,0,1511,
        1512,1,0,0,0,1512,1532,1,0,0,0,1513,1515,7,14,0,0,1514,1513,1,0,
        0,0,1514,1515,1,0,0,0,1515,1532,1,0,0,0,1516,1518,7,15,0,0,1517,
        1516,1,0,0,0,1517,1518,1,0,0,0,1518,1532,1,0,0,0,1519,1521,7,16,
        0,0,1520,1519,1,0,0,0,1520,1521,1,0,0,0,1521,1532,1,0,0,0,1522,1526,
        5,99,0,0,1523,1524,5,100,0,0,1524,1526,5,101,0,0,1525,1522,1,0,0,
        0,1525,1523,1,0,0,0,1525,1526,1,0,0,0,1526,1532,1,0,0,0,1527,1532,
        5,165,0,0,1528,1530,7,17,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,
        1530,1532,1,0,0,0,1531,1486,1,0,0,0,1531,1489,1,0,0,0,1531,1491,
        1,0,0,0,1531,1493,1,0,0,0,1531,1496,1,0,0,0,1531,1499,1,0,0,0,1531,
        1502,1,0,0,0,1531,1505,1,0,0,0,1531,1508,1,0,0,0,1531,1511,1,0,0,
        0,1531,1514,1,0,0,0,1531,1517,1,0,0,0,1531,1520,1,0,0,0,1531,1525,
        1,0,0,0,1531,1527,1,0,0,0,1531,1529,1,0,0,0,1532,149,1,0,0,0,1533,
        1534,5,167,0,0,1534,1535,3,228,114,0,1535,1539,3,206,103,0,1536,
        1538,3,152,76,0,1537,1536,1,0,0,0,1538,1541,1,0,0,0,1539,1537,1,
        0,0,0,1539,1540,1,0,0,0,1540,1542,1,0,0,0,1541,1539,1,0,0,0,1542,
        1543,3,208,104,0,1543,1544,5,196,0,0,1544,151,1,0,0,0,1545,1546,
        5,105,0,0,1546,1547,5,182,0,0,1547,1582,5,196,0,0,1548,1549,5,56,
        0,0,1549,1550,3,216,108,0,1550,1551,5,196,0,0,1551,1582,1,0,0,0,
        1552,1553,5,57,0,0,1553,1554,3,216,108,0,1554,1555,5,196,0,0,1555,
        1582,1,0,0,0,1556,1557,5,51,0,0,1557,1558,5,179,0,0,1558,1582,5,
        196,0,0,1559,1560,5,106,0,0,1560,1561,3,156,78,0,1561,1562,5,196,
        0,0,1562,1582,1,0,0,0,1563,1564,5,43,0,0,1564,1565,3,154,77,0,1565,
        1566,5,196,0,0,1566,1582,1,0,0,0,1567,1568,5,60,0,0,1568,1569,5,
        182,0,0,1569,1582,5,196,0,0,1570,1571,5,53,0,0,1571,1572,5,182,0,
        0,1572,1582,5,196,0,0,1573,1574,5,107,0,0,1574,1575,5,182,0,0,1575,
        1582,5,196,0,0,1576,1577,5,49,0,0,1577,1578,5,182,0,0,1578,1582,
        5,196,0,0,1579,1582,3,220,110,0,1580,1582,5,196,0,0,1581,1545,1,
        0,0,0,1581,1548,1,0,0,0,1581,1552,1,0,0,0,1581,1556,1,0,0,0,1581,
        1559,1,0,0,0,1581,1563,1,0,0,0,1581,1567,1,0,0,0,1581,1570,1,0,0,
        0,1581,1573,1,0,0,0,1581,1576,1,0,0,0,1581,1579,1,0,0,0,1581,1580,
        1,0,0,0,1582,153,1,0,0,0,1583,1584,7,18,0,0,1584,155,1,0,0,0,1585,
        1586,7,19,0,0,1586,157,1,0,0,0,1587,1588,5,138,0,0,1588,1590,3,212,
        106,0,1589,1591,3,214,107,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,
        1591,1592,1,0,0,0,1592,1593,5,196,0,0,1593,159,1,0,0,0,1594,1595,
        5,139,0,0,1595,1597,3,212,106,0,1596,1598,3,214,107,0,1597,1596,
        1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1600,5,196,0,0,
        1600,161,1,0,0,0,1601,1602,5,140,0,0,1602,1603,7,20,0,0,1603,1604,
        5,196,0,0,1604,163,1,0,0,0,1605,1607,3,224,112,0,1606,1605,1,0,0,
        0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1609,5,141,0,0,1609,1620,
        3,214,107,0,1610,1615,3,206,103,0,1611,1614,3,6,3,0,1612,1614,3,
        14,7,0,1613,1611,1,0,0,0,1613,1612,1,0,0,0,1614,1617,1,0,0,0,1615,
        1613,1,0,0,0,1615,1616,1,0,0,0,1616,1618,1,0,0,0,1617,1615,1,0,0,
        0,1618,1619,3,208,104,0,1619,1621,1,0,0,0,1620,1610,1,0,0,0,1620,
        1621,1,0,0,0,1621,1622,1,0,0,0,1622,1623,5,196,0,0,1623,165,1,0,
        0,0,1624,1625,5,146,0,0,1625,1626,5,179,0,0,1626,1627,5,196,0,0,
        1627,167,1,0,0,0,1628,1630,3,224,112,0,1629,1628,1,0,0,0,1629,1630,
        1,0,0,0,1630,1631,1,0,0,0,1631,1632,5,142,0,0,1632,1642,3,214,107,
        0,1633,1637,3,206,103,0,1634,1636,3,244,122,0,1635,1634,1,0,0,0,
        1636,1639,1,0,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,1640,
        1,0,0,0,1639,1637,1,0,0,0,1640,1641,3,208,104,0,1641,1643,1,0,0,
        0,1642,1633,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1645,
        5,196,0,0,1645,169,1,0,0,0,1646,1660,5,143,0,0,1647,1661,5,190,0,
        0,1648,1658,3,214,107,0,1649,1653,3,206,103,0,1650,1652,3,172,86,
        0,1651,1650,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1653,1654,
        1,0,0,0,1654,1656,1,0,0,0,1655,1653,1,0,0,0,1656,1657,3,208,104,
        0,1657,1659,1,0,0,0,1658,1649,1,0,0,0,1658,1659,1,0,0,0,1659,1661,
        1,0,0,0,1660,1647,1,0,0,0,1660,1648,1,0,0,0,1661,1662,1,0,0,0,1662,
        1663,5,196,0,0,1663,171,1,0,0,0,1664,1669,3,222,111,0,1665,1669,
        5,190,0,0,1666,1669,5,184,0,0,1667,1669,5,196,0,0,1668,1664,1,0,
        0,0,1668,1665,1,0,0,0,1668,1666,1,0,0,0,1668,1667,1,0,0,0,1669,173,
        1,0,0,0,1670,1671,5,147,0,0,1671,1672,5,186,0,0,1672,1673,3,216,
        108,0,1673,1674,5,196,0,0,1674,175,1,0,0,0,1675,1676,5,144,0,0,1676,
        1677,5,186,0,0,1677,1678,3,216,108,0,1678,1679,5,196,0,0,1679,177,
        1,0,0,0,1680,1681,5,145,0,0,1681,1682,7,21,0,0,1682,1683,5,196,0,
        0,1683,179,1,0,0,0,1684,1687,5,148,0,0,1685,1688,5,190,0,0,1686,
        1688,3,214,107,0,1687,1685,1,0,0,0,1687,1686,1,0,0,0,1688,1698,1,
        0,0,0,1689,1693,3,206,103,0,1690,1692,3,182,91,0,1691,1690,1,0,0,
        0,1692,1695,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,1696,
        1,0,0,0,1695,1693,1,0,0,0,1696,1697,3,208,104,0,1697,1699,1,0,0,
        0,1698,1689,1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,0,0,1700,1701,
        5,196,0,0,1701,181,1,0,0,0,1702,1703,5,184,0,0,1703,1704,5,184,0,
        0,1704,1707,5,196,0,0,1705,1707,5,196,0,0,1706,1702,1,0,0,0,1706,
        1705,1,0,0,0,1707,183,1,0,0,0,1708,1720,3,158,79,0,1709,1720,3,160,
        80,0,1710,1720,3,162,81,0,1711,1720,3,164,82,0,1712,1720,3,168,84,
        0,1713,1720,3,170,85,0,1714,1720,3,176,88,0,1715,1720,3,166,83,0,
        1716,1720,3,174,87,0,1717,1720,3,180,90,0,1718,1720,3,178,89,0,1719,
        1708,1,0,0,0,1719,1709,1,0,0,0,1719,1710,1,0,0,0,1719,1711,1,0,0,
        0,1719,1712,1,0,0,0,1719,1713,1,0,0,0,1719,1714,1,0,0,0,1719,1715,
        1,0,0,0,1719,1716,1,0,0,0,1719,1717,1,0,0,0,1719,1718,1,0,0,0,1720,
        185,1,0,0,0,1721,1722,5,115,0,0,1722,1726,3,206,103,0,1723,1725,
        3,188,94,0,1724,1723,1,0,0,0,1725,1728,1,0,0,0,1726,1724,1,0,0,0,
        1726,1727,1,0,0,0,1727,1729,1,0,0,0,1728,1726,1,0,0,0,1729,1730,
        3,208,104,0,1730,1731,5,196,0,0,1731,187,1,0,0,0,1732,1733,3,248,
        124,0,1733,1734,5,186,0,0,1734,1735,5,196,0,0,1735,189,1,0,0,0,1736,
        1737,5,174,0,0,1737,1741,3,206,103,0,1738,1740,3,192,96,0,1739,1738,
        1,0,0,0,1740,1743,1,0,0,0,1741,1739,1,0,0,0,1741,1742,1,0,0,0,1742,
        1744,1,0,0,0,1743,1741,1,0,0,0,1744,1745,3,208,104,0,1745,1746,5,
        196,0,0,1746,191,1,0,0,0,1747,1748,5,190,0,0,1748,1749,7,22,0,0,
        1749,1750,5,196,0,0,1750,193,1,0,0,0,1751,1752,5,118,0,0,1752,1753,
        7,23,0,0,1753,1754,5,196,0,0,1754,195,1,0,0,0,1755,1756,5,121,0,
        0,1756,1757,7,24,0,0,1757,1758,5,196,0,0,1758,197,1,0,0,0,1759,1760,
        5,124,0,0,1760,1764,5,190,0,0,1761,1763,5,190,0,0,1762,1761,1,0,
        0,0,1763,1766,1,0,0,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1767,
        1,0,0,0,1766,1764,1,0,0,0,1767,1768,5,196,0,0,1768,199,1,0,0,0,1769,
        1770,5,125,0,0,1770,1771,7,25,0,0,1771,1772,5,196,0,0,1772,201,1,
        0,0,0,1773,1774,5,126,0,0,1774,1778,3,206,103,0,1775,1777,3,204,
        102,0,1776,1775,1,0,0,0,1777,1780,1,0,0,0,1778,1776,1,0,0,0,1778,
        1779,1,0,0,0,1779,1781,1,0,0,0,1780,1778,1,0,0,0,1781,1782,3,208,
        104,0,1782,1783,5,196,0,0,1783,203,1,0,0,0,1784,1787,5,127,0,0,1785,
        1788,3,214,107,0,1786,1788,5,190,0,0,1787,1785,1,0,0,0,1787,1786,
        1,0,0,0,1788,1789,1,0,0,0,1789,1797,5,196,0,0,1790,1791,5,128,0,
        0,1791,1792,3,214,107,0,1792,1793,5,190,0,0,1793,1794,5,196,0,0,
        1794,1797,1,0,0,0,1795,1797,5,196,0,0,1796,1784,1,0,0,0,1796,1790,
        1,0,0,0,1796,1795,1,0,0,0,1797,205,1,0,0,0,1798,1799,5,129,0,0,1799,
        1800,5,196,0,0,1800,207,1,0,0,0,1801,1802,5,130,0,0,1802,209,1,0,
        0,0,1803,1804,5,131,0,0,1804,1805,5,181,0,0,1805,211,1,0,0,0,1806,
        1807,3,214,107,0,1807,213,1,0,0,0,1808,1813,5,186,0,0,1809,1813,
        5,184,0,0,1810,1813,3,248,124,0,1811,1813,5,190,0,0,1812,1808,1,
        0,0,0,1812,1809,1,0,0,0,1812,1810,1,0,0,0,1812,1811,1,0,0,0,1813,
        215,1,0,0,0,1814,1822,5,184,0,0,1815,1822,5,185,0,0,1816,1822,5,
        179,0,0,1817,1822,5,137,0,0,1818,1822,5,186,0,0,1819,1822,3,218,
        109,0,1820,1822,3,124,62,0,1821,1814,1,0,0,0,1821,1815,1,0,0,0,1821,
        1816,1,0,0,0,1821,1817,1,0,0,0,1821,1818,1,0,0,0,1821,1819,1,0,0,
        0,1821,1820,1,0,0,0,1822,217,1,0,0,0,1823,1831,5,129,0,0,1824,1825,
        5,184,0,0,1825,1826,5,132,0,0,1826,1827,3,216,108,0,1827,1828,5,
        193,0,0,1828,1830,1,0,0,0,1829,1824,1,0,0,0,1830,1833,1,0,0,0,1831,
        1829,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,0,1833,1831,1,0,0,
        0,1834,1835,5,130,0,0,1835,219,1,0,0,0,1836,1837,5,133,0,0,1837,
        1839,3,206,103,0,1838,1840,3,222,111,0,1839,1838,1,0,0,0,1840,1841,
        1,0,0,0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,
        1844,3,208,104,0,1844,1845,5,196,0,0,1845,221,1,0,0,0,1846,1847,
        3,214,107,0,1847,1848,3,216,108,0,1848,1849,5,196,0,0,1849,223,1,
        0,0,0,1850,1853,5,186,0,0,1851,1853,3,248,124,0,1852,1850,1,0,0,
        0,1852,1851,1,0,0,0,1853,1854,1,0,0,0,1854,1855,5,134,0,0,1855,225,
        1,0,0,0,1856,1857,7,26,0,0,1857,227,1,0,0,0,1858,1859,7,26,0,0,1859,
        229,1,0,0,0,1860,1861,7,26,0,0,1861,231,1,0,0,0,1862,1863,7,26,0,
        0,1863,233,1,0,0,0,1864,1871,5,184,0,0,1865,1867,5,194,0,0,1866,
        1865,1,0,0,0,1866,1867,1,0,0,0,1867,1868,1,0,0,0,1868,1870,5,184,
        0,0,1869,1866,1,0,0,0,1870,1873,1,0,0,0,1871,1869,1,0,0,0,1871,1872,
        1,0,0,0,1872,235,1,0,0,0,1873,1871,1,0,0,0,1874,1875,5,135,0,0,1875,
        1876,5,184,0,0,1876,237,1,0,0,0,1877,1878,5,136,0,0,1878,1879,5,
        190,0,0,1879,239,1,0,0,0,1880,1881,5,180,0,0,1881,241,1,0,0,0,1882,
        1884,3,224,112,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1885,1,
        0,0,0,1885,1886,5,161,0,0,1886,1891,3,214,107,0,1887,1889,3,232,
        116,0,1888,1890,3,234,117,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,
        1890,1892,1,0,0,0,1891,1887,1,0,0,0,1891,1892,1,0,0,0,1892,1902,
        1,0,0,0,1893,1897,3,206,103,0,1894,1896,3,244,122,0,1895,1894,1,
        0,0,0,1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,
        1900,1,0,0,0,1899,1897,1,0,0,0,1900,1901,3,208,104,0,1901,1903,1,
        0,0,0,1902,1893,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,
        1905,5,196,0,0,1905,243,1,0,0,0,1906,1911,3,8,4,0,1907,1911,3,12,
        6,0,1908,1911,3,16,8,0,1909,1911,5,196,0,0,1910,1906,1,0,0,0,1910,
        1907,1,0,0,0,1910,1908,1,0,0,0,1910,1909,1,0,0,0,1911,245,1,0,0,
        0,1912,1913,5,184,0,0,1913,247,1,0,0,0,1914,1915,7,27,0,0,1915,249,
        1,0,0,0,209,252,254,262,264,270,277,294,299,301,307,323,326,332,
        334,340,345,364,367,373,375,381,386,411,414,421,423,425,431,436,
        462,465,472,474,476,482,487,515,518,526,528,530,532,538,543,573,
        576,583,585,587,593,598,623,629,631,637,642,665,672,676,683,689,
        691,697,702,725,732,734,743,750,752,754,760,765,782,789,798,807,
        831,834,838,841,847,887,892,898,900,906,914,919,931,937,940,944,
        947,950,956,963,967,970,973,979,989,994,996,1002,1020,1024,1028,
        1030,1036,1049,1052,1058,1060,1066,1071,1084,1087,1094,1096,1102,
        1107,1130,1137,1140,1146,1151,1181,1187,1189,1195,1212,1219,1221,
        1223,1229,1248,1256,1258,1264,1298,1310,1320,1329,1342,1353,1360,
        1369,1375,1377,1379,1385,1413,1421,1483,1486,1489,1493,1496,1499,
        1502,1505,1508,1511,1514,1517,1520,1525,1529,1531,1539,1581,1590,
        1597,1606,1613,1615,1620,1629,1637,1642,1653,1658,1660,1668,1687,
        1693,1698,1706,1719,1726,1741,1764,1778,1787,1796,1812,1821,1831,
        1841,1852,1866,1871,1883,1889,1891,1897,1902,1910
    ]

class StructurizrParser ( Parser ):

    grammarFileName = "Structurizr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'extends'", "'healthCheck'", "'order'", 
                     "'A6_Landscape'", "'A5_Portrait'", "'A5_Landscape'", 
                     "'A4_Portrait'", "'A4_Landscape'", "'A3_Portrait'", 
                     "'A3_Landscape'", "'A2_Portrait'", "'A2_Landscape'", 
                     "'A1_Portrait'", "'A1_Landscape'", "'A0_Portrait'", 
                     "'A0_Landscape'", "'Letter_Portrait'", "'Letter_Landscape'", 
                     "'Legal_Portrait'", "'Legal_Landscape'", "'Slide_4_3'", 
                     "'Slide_16_9'", "'Slide_16_10'", "'tb'", "'bt'", "'lr'", 
                     "'rl'", "'default'", "'include'", "'*'", "'exclude'", 
                     "'filtered'", "'dynamic'", "'plantuml'", "'mermaid'", 
                     "'kroki'", "'id'", "'x'", "'y'", "'target'", "'response'", 
                     "'verticies'", "'routing'", "'sourceConnector'", "'targetConnector'", 
                     "'animation'", "'dimensions'", "'custom'", "'opacity'", 
                     "'shape'", "'dashed'", "'icon'", "'width'", "'height'", 
                     "'background'", "'color'", "'colour'", "'stroke'", 
                     "'strokeWidth'", "'fontSize'", "'border'", "'metadata'", 
                     "'Box'", "'box'", "'BOX'", "'RoundedBox'", "'roundedbox'", 
                     "'ROUNDEDBOX'", "'Circle'", "'circle'", "'CIRCLE'", 
                     "'Ellipse'", "'ellipse'", "'ELLIPSE'", "'Hexagon'", 
                     "'hexagon'", "'HEXAGON'", "'Diamond'", "'diamond'", 
                     "'DIAMOND'", "'Folder'", "'folder'", "'FOLDER'", "'Cylinder'", 
                     "'cylinder'", "'CYLINDER'", "'Pipe'", "'pipe'", "'PIPE'", 
                     "'WebBrowser'", "'webbrowser'", "'WEBBROWSER'", "'Window'", 
                     "'window'", "'WINDOW'", "'MobileDevicePortrait'", "'mobiledeviceportrait'", 
                     "'MOBILEDEVICEPORTRAIT'", "'MobileDeviceLandscape'", 
                     "'mobiledevicelandscape'", "'MOBILEDEVICELANDSCAPE'", 
                     "'Robot'", "'robot'", "'ROBOT'", "'thickness'", "'style'", 
                     "'position'", "'Direct'", "'Curved'", "'Orthogonal'", 
                     "'solid'", "'dotted'", "'hierarchical'", "'flat'", 
                     "'terminology'", "'read'", "'write'", "'scope'", "'landscape'", 
                     "'none'", "'visibility'", "'private'", "'public'", 
                     "'themes'", "'theme'", "'branding'", "'logo'", "'font'", 
                     "'{'", "'}'", "'instances'", "':'", "'properties'", 
                     "'='", "'title'", "'url'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'->'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'['", "']'", 
                     "';'", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "HEXNUMBER", "BANGDOCS", "BANGADRS", 
                      "BANGIDENTIFIERS", "BANGEXTEND", "BANGREF", "BANGSCRIPT", 
                      "BANGCONST", "BANGINCLUDE", "BANGIMPLIEDRELATIONSHIPS", 
                      "BANGVAR", "BANGPLUGIN", "AUTOLAYOUT", "COMPONENT", 
                      "CONFIGURATION", "CONTAINERINSTANCE", "CONTAINER", 
                      "DEPLOYMENTENVIRONMENT", "DEPLOYMENTGROUP", "DEPLOYMENTNODE", 
                      "DEPLOYMENT", "DESCRIPTION", "ELEMENTVIEW", "ELEMENT", 
                      "GROUP", "IMAGE", "INFRASTRUCTURENODE", "MODEL", "PERSON", 
                      "PERSPECTIVES", "RELATIONSHIP", "SOFTWARESYSTEMINSTANCE", 
                      "SOFTWARESYSTEM", "STYLES", "SYSTEMCONTEXT", "SYSTEMLANDSCAPE", 
                      "TAGS", "USERS", "VIEWS", "WORKSPACE", "NAMENAME", 
                      "RIGHTARROW", "BOOLEAN", "LOCATION_TYPE", "INSTANCE_STRING", 
                      "POSITIVE_INT", "INSTANCES", "STRING", "NUMBER", "IDENTIFIER", 
                      "LINE_COMMENT", "POUND_COMMENT", "COMMENT", "URLTEXT", 
                      "LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", "WS", 
                      "NEWLINE" ]

    RULE_workspace = 0
    RULE_workspace_body = 1
    RULE_model = 2
    RULE_model_body = 3
    RULE_person = 4
    RULE_person_body = 5
    RULE_softwareSystem = 6
    RULE_softwareSystem_body = 7
    RULE_container = 8
    RULE_container_body = 9
    RULE_component = 10
    RULE_component_body = 11
    RULE_deploymentNode = 12
    RULE_deploymentNode_body = 13
    RULE_infrastructureNode = 14
    RULE_infrastructureNode_body = 15
    RULE_softwareSystemInstance = 16
    RULE_softwareSystemInstance_body = 17
    RULE_deploymentGroups = 18
    RULE_deploymentGroup = 19
    RULE_containerInstance = 20
    RULE_container_inst_body = 21
    RULE_healthCheck = 22
    RULE_interval = 23
    RULE_timeout = 24
    RULE_relationship = 25
    RULE_relationship_body = 26
    RULE_perspectives = 27
    RULE_perspectives_body = 28
    RULE_views = 29
    RULE_views_body = 30
    RULE_systemLandscapeView = 31
    RULE_view_body = 32
    RULE_paperSize = 33
    RULE_systemContextView = 34
    RULE_automaticLayout = 35
    RULE_rankSeparation = 36
    RULE_nodeSeparation = 37
    RULE_default = 38
    RULE_include = 39
    RULE_exclude = 40
    RULE_containerView = 41
    RULE_componentView = 42
    RULE_filteredView = 43
    RULE_filtered_body = 44
    RULE_dynamicView = 45
    RULE_dynamicView_body = 46
    RULE_deploymentEnvironment = 47
    RULE_dep_env_body = 48
    RULE_deploymentView = 49
    RULE_deployment_view_body = 50
    RULE_environment = 51
    RULE_imageView = 52
    RULE_imageView_body = 53
    RULE_customElement = 54
    RULE_custom_element_body = 55
    RULE_elementView = 56
    RULE_elementView_body = 57
    RULE_metadata = 58
    RULE_relationshipView = 59
    RULE_relationshipView_body = 60
    RULE_pair = 61
    RULE_array = 62
    RULE_animation = 63
    RULE_animation_body = 64
    RULE_dimensions = 65
    RULE_configuration = 66
    RULE_configuration_body = 67
    RULE_styles = 68
    RULE_style_body = 69
    RULE_customView = 70
    RULE_custom_body = 71
    RULE_elementStyle = 72
    RULE_element_style_body = 73
    RULE_shapetype = 74
    RULE_relationshipStyle = 75
    RULE_rel_style_body = 76
    RULE_routingType = 77
    RULE_styleType = 78
    RULE_bang_docs = 79
    RULE_bang_adrs = 80
    RULE_bang_identifiers = 81
    RULE_bang_extend = 82
    RULE_bang_impliedRelationships = 83
    RULE_bang_ref = 84
    RULE_bang_script = 85
    RULE_bang_script_body = 86
    RULE_bang_var = 87
    RULE_bang_const = 88
    RULE_bang_include = 89
    RULE_bang_plugin = 90
    RULE_bang_plugin_body = 91
    RULE_bangs = 92
    RULE_terminology = 93
    RULE_terminology_body = 94
    RULE_users = 95
    RULE_users_body = 96
    RULE_scope = 97
    RULE_visibility = 98
    RULE_themes = 99
    RULE_theme = 100
    RULE_branding = 101
    RULE_branding_body = 102
    RULE_openCurly = 103
    RULE_closeCurly = 104
    RULE_instances = 105
    RULE_path = 106
    RULE_name = 107
    RULE_value = 108
    RULE_object = 109
    RULE_properties = 110
    RULE_name_value_pair = 111
    RULE_identifier = 112
    RULE_technology = 113
    RULE_tag = 114
    RULE_key = 115
    RULE_description = 116
    RULE_tags = 117
    RULE_title = 118
    RULE_url = 119
    RULE_location = 120
    RULE_group = 121
    RULE_group_body = 122
    RULE_perspective = 123
    RULE_keywords = 124

    ruleNames =  [ "workspace", "workspace_body", "model", "model_body", 
                   "person", "person_body", "softwareSystem", "softwareSystem_body", 
                   "container", "container_body", "component", "component_body", 
                   "deploymentNode", "deploymentNode_body", "infrastructureNode", 
                   "infrastructureNode_body", "softwareSystemInstance", 
                   "softwareSystemInstance_body", "deploymentGroups", "deploymentGroup", 
                   "containerInstance", "container_inst_body", "healthCheck", 
                   "interval", "timeout", "relationship", "relationship_body", 
                   "perspectives", "perspectives_body", "views", "views_body", 
                   "systemLandscapeView", "view_body", "paperSize", "systemContextView", 
                   "automaticLayout", "rankSeparation", "nodeSeparation", 
                   "default", "include", "exclude", "containerView", "componentView", 
                   "filteredView", "filtered_body", "dynamicView", "dynamicView_body", 
                   "deploymentEnvironment", "dep_env_body", "deploymentView", 
                   "deployment_view_body", "environment", "imageView", "imageView_body", 
                   "customElement", "custom_element_body", "elementView", 
                   "elementView_body", "metadata", "relationshipView", "relationshipView_body", 
                   "pair", "array", "animation", "animation_body", "dimensions", 
                   "configuration", "configuration_body", "styles", "style_body", 
                   "customView", "custom_body", "elementStyle", "element_style_body", 
                   "shapetype", "relationshipStyle", "rel_style_body", "routingType", 
                   "styleType", "bang_docs", "bang_adrs", "bang_identifiers", 
                   "bang_extend", "bang_impliedRelationships", "bang_ref", 
                   "bang_script", "bang_script_body", "bang_var", "bang_const", 
                   "bang_include", "bang_plugin", "bang_plugin_body", "bangs", 
                   "terminology", "terminology_body", "users", "users_body", 
                   "scope", "visibility", "themes", "theme", "branding", 
                   "branding_body", "openCurly", "closeCurly", "instances", 
                   "path", "name", "value", "object", "properties", "name_value_pair", 
                   "identifier", "technology", "tag", "key", "description", 
                   "tags", "title", "url", "location", "group", "group_body", 
                   "perspective", "keywords" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    HEXNUMBER=137
    BANGDOCS=138
    BANGADRS=139
    BANGIDENTIFIERS=140
    BANGEXTEND=141
    BANGREF=142
    BANGSCRIPT=143
    BANGCONST=144
    BANGINCLUDE=145
    BANGIMPLIEDRELATIONSHIPS=146
    BANGVAR=147
    BANGPLUGIN=148
    AUTOLAYOUT=149
    COMPONENT=150
    CONFIGURATION=151
    CONTAINERINSTANCE=152
    CONTAINER=153
    DEPLOYMENTENVIRONMENT=154
    DEPLOYMENTGROUP=155
    DEPLOYMENTNODE=156
    DEPLOYMENT=157
    DESCRIPTION=158
    ELEMENTVIEW=159
    ELEMENT=160
    GROUP=161
    IMAGE=162
    INFRASTRUCTURENODE=163
    MODEL=164
    PERSON=165
    PERSPECTIVES=166
    RELATIONSHIP=167
    SOFTWARESYSTEMINSTANCE=168
    SOFTWARESYSTEM=169
    STYLES=170
    SYSTEMCONTEXT=171
    SYSTEMLANDSCAPE=172
    TAGS=173
    USERS=174
    VIEWS=175
    WORKSPACE=176
    NAMENAME=177
    RIGHTARROW=178
    BOOLEAN=179
    LOCATION_TYPE=180
    INSTANCE_STRING=181
    POSITIVE_INT=182
    INSTANCES=183
    STRING=184
    NUMBER=185
    IDENTIFIER=186
    LINE_COMMENT=187
    POUND_COMMENT=188
    COMMENT=189
    URLTEXT=190
    LBRACKET=191
    RBRACKET=192
    SEMICOLON=193
    COMMA=194
    WS=195
    NEWLINE=196

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class WorkspaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WORKSPACE(self):
            return self.getToken(StructurizrParser.WORKSPACE, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def bangs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.BangsContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.BangsContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.NEWLINE)
            else:
                return self.getToken(StructurizrParser.NEWLINE, i)

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def workspace_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Workspace_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Workspace_bodyContext,i)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_workspace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkspace" ):
                listener.enterWorkspace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkspace" ):
                listener.exitWorkspace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWorkspace" ):
                return visitor.visitWorkspace(self)
            else:
                return visitor.visitChildren(self)




    def workspace(self):

        localctx = StructurizrParser.WorkspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_workspace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 252
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 186]:
                        self.state = 250
                        self.bangs()
                        pass
                    elif token in [196]:
                        self.state = 251
                        self.match(StructurizrParser.NEWLINE)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 257
            self.match(StructurizrParser.WORKSPACE)
            self.state = 264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 258
                self.match(StructurizrParser.T__0)
                self.state = 259
                self.match(StructurizrParser.URLTEXT)
                pass
            elif token in [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 184, 186, 190]:
                self.state = 260
                self.name()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 261
                    self.description()


                pass
            elif token in [129]:
                pass
            else:
                pass
            self.state = 266
            self.openCurly()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9214329653227946015) != 0):
                self.state = 267
                self.workspace_body()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 273
            self.closeCurly()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==196:
                self.state = 274
                self.match(StructurizrParser.NEWLINE)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Workspace_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def bangs(self):
            return self.getTypedRuleContext(StructurizrParser.BangsContext,0)


        def NAMENAME(self):
            return self.getToken(StructurizrParser.NAMENAME, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def model(self):
            return self.getTypedRuleContext(StructurizrParser.ModelContext,0)


        def views(self):
            return self.getTypedRuleContext(StructurizrParser.ViewsContext,0)


        def configuration(self):
            return self.getTypedRuleContext(StructurizrParser.ConfigurationContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_workspace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkspace_body" ):
                listener.enterWorkspace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkspace_body" ):
                listener.exitWorkspace_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWorkspace_body" ):
                return visitor.visitWorkspace_body(self)
            else:
                return visitor.visitChildren(self)




    def workspace_body(self):

        localctx = StructurizrParser.Workspace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_workspace_body)
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.properties()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 281
                self.bangs()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 282
                self.match(StructurizrParser.NAMENAME)
                self.state = 283
                self.name()
                self.state = 284
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 286
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 287
                self.description()
                self.state = 288
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 290
                self.model()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 291
                self.views()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 292
                self.configuration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 293
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(StructurizrParser.MODEL, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def model_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Model_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Model_bodyContext,i)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel" ):
                listener.enterModel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel" ):
                listener.exitModel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel" ):
                return visitor.visitModel(self)
            else:
                return visitor.visitChildren(self)




    def model(self):

        localctx = StructurizrParser.ModelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(StructurizrParser.MODEL)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0):
                self.state = 297
                self.name()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 298
                    self.description()




            self.state = 303
            self.openCurly()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425343) != 0):
                self.state = 304
                self.model_body()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 310
            self.closeCurly()
            self.state = 311
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bang_identifiers(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_identifiersContext,0)


        def bang_ref(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_refContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def group(self):
            return self.getTypedRuleContext(StructurizrParser.GroupContext,0)


        def person(self):
            return self.getTypedRuleContext(StructurizrParser.PersonContext,0)


        def softwareSystem(self):
            return self.getTypedRuleContext(StructurizrParser.SoftwareSystemContext,0)


        def deploymentEnvironment(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentEnvironmentContext,0)


        def customElement(self):
            return self.getTypedRuleContext(StructurizrParser.CustomElementContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_model_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_body" ):
                listener.enterModel_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_body" ):
                listener.exitModel_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_body" ):
                return visitor.visitModel_body(self)
            else:
                return visitor.visitChildren(self)




    def model_body(self):

        localctx = StructurizrParser.Model_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_model_body)
        try:
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self.bang_identifiers()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self.bang_ref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 315
                self.properties()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 316
                self.group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 317
                self.person()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 318
                self.softwareSystem()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 319
                self.deploymentEnvironment()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 320
                self.customElement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 321
                self.relationship()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 322
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PersonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSON(self):
            return self.getToken(StructurizrParser.PERSON, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def person_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Person_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Person_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_person

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerson" ):
                listener.enterPerson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerson" ):
                listener.exitPerson(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerson" ):
                return visitor.visitPerson(self)
            else:
                return visitor.visitChildren(self)




    def person(self):

        localctx = StructurizrParser.PersonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_person)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 325
                self.identifier()


            self.state = 328
            self.match(StructurizrParser.PERSON)
            self.state = 329
            self.name()
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 330
                self.description()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 331
                    self.tags()




            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 336
                self.openCurly()
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425975) != 0):
                    self.state = 337
                    self.person_body()
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 343
                self.closeCurly()


            self.state = 347
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Person_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_person_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerson_body" ):
                listener.enterPerson_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerson_body" ):
                listener.exitPerson_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerson_body" ):
                return visitor.visitPerson_body(self)
            else:
                return visitor.visitChildren(self)




    def person_body(self):

        localctx = StructurizrParser.Person_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_person_body)
        try:
            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 350
                self.description()
                self.state = 351
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 353
                self.match(StructurizrParser.TAGS)
                self.state = 354
                self.tags()
                self.state = 355
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 357
                self.url()
                self.state = 358
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 360
                self.properties()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                self.perspectives()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 362
                self.relationship()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 363
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoftwareSystemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOFTWARESYSTEM(self):
            return self.getToken(StructurizrParser.SOFTWARESYSTEM, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def softwareSystem_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.SoftwareSystem_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.SoftwareSystem_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_softwareSystem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoftwareSystem" ):
                listener.enterSoftwareSystem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoftwareSystem" ):
                listener.exitSoftwareSystem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoftwareSystem" ):
                return visitor.visitSoftwareSystem(self)
            else:
                return visitor.visitChildren(self)




    def softwareSystem(self):

        localctx = StructurizrParser.SoftwareSystemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_softwareSystem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 366
                self.identifier()


            self.state = 369
            self.match(StructurizrParser.SOFTWARESYSTEM)
            self.state = 370
            self.name()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 371
                self.description()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 372
                    self.tags()




            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 377
                self.openCurly()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425111) != 0):
                    self.state = 378
                    self.softwareSystem_body()
                    self.state = 383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 384
                self.closeCurly()


            self.state = 388
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoftwareSystem_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bang_docs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_docsContext,0)


        def bang_adrs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_adrsContext,0)


        def bang_ref(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_refContext,0)


        def bang_extend(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_extendContext,0)


        def group(self):
            return self.getTypedRuleContext(StructurizrParser.GroupContext,0)


        def container(self):
            return self.getTypedRuleContext(StructurizrParser.ContainerContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_softwareSystem_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoftwareSystem_body" ):
                listener.enterSoftwareSystem_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoftwareSystem_body" ):
                listener.exitSoftwareSystem_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoftwareSystem_body" ):
                return visitor.visitSoftwareSystem_body(self)
            else:
                return visitor.visitChildren(self)




    def softwareSystem_body(self):

        localctx = StructurizrParser.SoftwareSystem_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_softwareSystem_body)
        try:
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.bang_docs()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.bang_adrs()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 392
                self.bang_ref()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 393
                self.bang_extend()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 394
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 395
                self.container()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 396
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 397
                self.description()
                self.state = 398
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 400
                self.match(StructurizrParser.TAGS)
                self.state = 401
                self.tags()
                self.state = 402
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 404
                self.url()
                self.state = 405
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 407
                self.properties()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 408
                self.perspectives()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 409
                self.relationship()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 410
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER(self):
            return self.getToken(StructurizrParser.CONTAINER, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def container_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Container_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Container_bodyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_container

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer" ):
                listener.enterContainer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer" ):
                listener.exitContainer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainer" ):
                return visitor.visitContainer(self)
            else:
                return visitor.visitChildren(self)




    def container(self):

        localctx = StructurizrParser.ContainerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_container)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 413
                self.identifier()


            self.state = 416
            self.match(StructurizrParser.CONTAINER)
            self.state = 417
            self.name()
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 418
                self.description()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 419
                    self.technology()
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184:
                        self.state = 420
                        self.tags()






            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 427
                self.openCurly()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425879) != 0):
                    self.state = 428
                    self.container_body()
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 434
                self.closeCurly()


            self.state = 438
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bang_docs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_docsContext,0)


        def bang_adrs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_adrsContext,0)


        def group(self):
            return self.getTypedRuleContext(StructurizrParser.GroupContext,0)


        def component(self):
            return self.getTypedRuleContext(StructurizrParser.ComponentContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_container_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_body" ):
                listener.enterContainer_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_body" ):
                listener.exitContainer_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainer_body" ):
                return visitor.visitContainer_body(self)
            else:
                return visitor.visitChildren(self)




    def container_body(self):

        localctx = StructurizrParser.Container_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_container_body)
        try:
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.bang_docs()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.bang_adrs()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.component()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 444
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 445
                self.description()
                self.state = 446
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 448
                self.technology()
                self.state = 449
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 451
                self.match(StructurizrParser.TAGS)
                self.state = 452
                self.tags()
                self.state = 453
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 455
                self.url()
                self.state = 456
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 458
                self.properties()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 459
                self.perspectives()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 460
                self.relationship()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 461
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPONENT(self):
            return self.getToken(StructurizrParser.COMPONENT, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def component_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Component_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Component_bodyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent" ):
                listener.enterComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent" ):
                listener.exitComponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponent" ):
                return visitor.visitComponent(self)
            else:
                return visitor.visitChildren(self)




    def component(self):

        localctx = StructurizrParser.ComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_component)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 464
                self.identifier()


            self.state = 467
            self.match(StructurizrParser.COMPONENT)
            self.state = 468
            self.name()
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 469
                self.description()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 470
                    self.technology()
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184:
                        self.state = 471
                        self.tags()






            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 478
                self.openCurly()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425879) != 0):
                    self.state = 479
                    self.component_body()
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 485
                self.closeCurly()


            self.state = 489
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bang_docs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_docsContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def bang_adrs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_adrsContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_component_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_body" ):
                listener.enterComponent_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_body" ):
                listener.exitComponent_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponent_body" ):
                return visitor.visitComponent_body(self)
            else:
                return visitor.visitChildren(self)




    def component_body(self):

        localctx = StructurizrParser.Component_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_component_body)
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.bang_docs()
                self.state = 492
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 494
                self.bang_adrs()
                self.state = 495
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 498
                self.description()
                self.state = 499
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 501
                self.technology()
                self.state = 502
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 504
                self.match(StructurizrParser.TAGS)
                self.state = 505
                self.tags()
                self.state = 506
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 508
                self.url()
                self.state = 509
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 511
                self.properties()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 512
                self.perspectives()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 513
                self.relationship()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 514
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeploymentNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEPLOYMENTNODE(self):
            return self.getToken(StructurizrParser.DEPLOYMENTNODE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def deploymentNode_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.DeploymentNode_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.DeploymentNode_bodyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def INSTANCES(self):
            return self.getToken(StructurizrParser.INSTANCES, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_deploymentNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeploymentNode" ):
                listener.enterDeploymentNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeploymentNode" ):
                listener.exitDeploymentNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeploymentNode" ):
                return visitor.visitDeploymentNode(self)
            else:
                return visitor.visitChildren(self)




    def deploymentNode(self):

        localctx = StructurizrParser.DeploymentNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deploymentNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 517
                self.identifier()


            self.state = 520
            self.match(StructurizrParser.DEPLOYMENTNODE)
            self.state = 521
            self.name()
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 522
                self.description()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 523
                    self.technology()
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184:
                        self.state = 524
                        self.tags()
                        self.state = 526
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==182 or _la==183:
                            self.state = 525
                            _la = self._input.LA(1)
                            if not(_la==182 or _la==183):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()








            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 534
                self.openCurly()
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 621707854809399333) != 0) or _la==196:
                    self.state = 535
                    self.deploymentNode_body()
                    self.state = 540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 541
                self.closeCurly()


            self.state = 545
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeploymentNode_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(StructurizrParser.GroupContext,0)


        def deploymentNode(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentNodeContext,0)


        def infrastructureNode(self):
            return self.getTypedRuleContext(StructurizrParser.InfrastructureNodeContext,0)


        def softwareSystemInstance(self):
            return self.getTypedRuleContext(StructurizrParser.SoftwareSystemInstanceContext,0)


        def containerInstance(self):
            return self.getTypedRuleContext(StructurizrParser.ContainerInstanceContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def instances(self):
            return self.getTypedRuleContext(StructurizrParser.InstancesContext,0)


        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_deploymentNode_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeploymentNode_body" ):
                listener.enterDeploymentNode_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeploymentNode_body" ):
                listener.exitDeploymentNode_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeploymentNode_body" ):
                return visitor.visitDeploymentNode_body(self)
            else:
                return visitor.visitChildren(self)




    def deploymentNode_body(self):

        localctx = StructurizrParser.DeploymentNode_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_deploymentNode_body)
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.deploymentNode()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 549
                self.infrastructureNode()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 550
                self.softwareSystemInstance()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 551
                self.containerInstance()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 552
                self.relationship()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 553
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 554
                self.description()
                self.state = 555
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 557
                self.technology()
                self.state = 558
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 560
                self.instances()
                self.state = 561
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 563
                self.match(StructurizrParser.TAGS)
                self.state = 564
                self.tags()
                self.state = 565
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 567
                self.url()
                self.state = 568
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 570
                self.properties()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 571
                self.perspectives()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 572
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfrastructureNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INFRASTRUCTURENODE(self):
            return self.getToken(StructurizrParser.INFRASTRUCTURENODE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def infrastructureNode_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.InfrastructureNode_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.InfrastructureNode_bodyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_infrastructureNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfrastructureNode" ):
                listener.enterInfrastructureNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfrastructureNode" ):
                listener.exitInfrastructureNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfrastructureNode" ):
                return visitor.visitInfrastructureNode(self)
            else:
                return visitor.visitChildren(self)




    def infrastructureNode(self):

        localctx = StructurizrParser.InfrastructureNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_infrastructureNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 575
                self.identifier()


            self.state = 578
            self.match(StructurizrParser.INFRASTRUCTURENODE)
            self.state = 579
            self.name()
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 580
                self.description()
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 581
                    self.technology()
                    self.state = 583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184:
                        self.state = 582
                        self.tags()






            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 589
                self.openCurly()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425975) != 0):
                    self.state = 590
                    self.infrastructureNode_body()
                    self.state = 595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 596
                self.closeCurly()


            self.state = 600
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfrastructureNode_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def environment(self):
            return self.getTypedRuleContext(StructurizrParser.EnvironmentContext,0)


        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_infrastructureNode_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfrastructureNode_body" ):
                listener.enterInfrastructureNode_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfrastructureNode_body" ):
                listener.exitInfrastructureNode_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfrastructureNode_body" ):
                return visitor.visitInfrastructureNode_body(self)
            else:
                return visitor.visitChildren(self)




    def infrastructureNode_body(self):

        localctx = StructurizrParser.InfrastructureNode_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_infrastructureNode_body)
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self.relationship()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 604
                self.description()
                self.state = 605
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.technology()
                self.state = 608
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 610
                self.environment()
                self.state = 611
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 613
                self.match(StructurizrParser.TAGS)
                self.state = 614
                self.tags()
                self.state = 615
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 617
                self.url()
                self.state = 618
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 620
                self.properties()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 621
                self.perspectives()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 622
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoftwareSystemInstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOFTWARESYSTEMINSTANCE(self):
            return self.getToken(StructurizrParser.SOFTWARESYSTEMINSTANCE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def deploymentGroups(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentGroupsContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def softwareSystemInstance_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.SoftwareSystemInstance_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.SoftwareSystemInstance_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_softwareSystemInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoftwareSystemInstance" ):
                listener.enterSoftwareSystemInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoftwareSystemInstance" ):
                listener.exitSoftwareSystemInstance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoftwareSystemInstance" ):
                return visitor.visitSoftwareSystemInstance(self)
            else:
                return visitor.visitChildren(self)




    def softwareSystemInstance(self):

        localctx = StructurizrParser.SoftwareSystemInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_softwareSystemInstance)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(StructurizrParser.SOFTWARESYSTEMINSTANCE)
            self.state = 626
            self.name()
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0):
                self.state = 627
                self.deploymentGroups()
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 628
                    self.tags()




            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 633
                self.openCurly()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425975) != 0):
                    self.state = 634
                    self.softwareSystemInstance_body()
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 640
                self.closeCurly()


            self.state = 644
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoftwareSystemInstance_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def healthCheck(self):
            return self.getTypedRuleContext(StructurizrParser.HealthCheckContext,0)


        def environment(self):
            return self.getTypedRuleContext(StructurizrParser.EnvironmentContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_softwareSystemInstance_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoftwareSystemInstance_body" ):
                listener.enterSoftwareSystemInstance_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoftwareSystemInstance_body" ):
                listener.exitSoftwareSystemInstance_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoftwareSystemInstance_body" ):
                return visitor.visitSoftwareSystemInstance_body(self)
            else:
                return visitor.visitChildren(self)




    def softwareSystemInstance_body(self):

        localctx = StructurizrParser.SoftwareSystemInstance_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_softwareSystemInstance_body)
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 647
                self.description()
                self.state = 648
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 650
                self.match(StructurizrParser.TAGS)
                self.state = 651
                self.tags()
                self.state = 652
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.relationship()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 655
                self.url()
                self.state = 656
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 658
                self.properties()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 659
                self.perspectives()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 660
                self.healthCheck()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 661
                self.environment()
                self.state = 662
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 664
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeploymentGroupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.NameContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.COMMA)
            else:
                return self.getToken(StructurizrParser.COMMA, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_deploymentGroups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeploymentGroups" ):
                listener.enterDeploymentGroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeploymentGroups" ):
                listener.exitDeploymentGroups(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeploymentGroups" ):
                return visitor.visitDeploymentGroups(self)
            else:
                return visitor.visitChildren(self)




    def deploymentGroups(self):

        localctx = StructurizrParser.DeploymentGroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_deploymentGroups)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.name()
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==194:
                self.state = 668
                self.match(StructurizrParser.COMMA)
                self.state = 669
                self.name()
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeploymentGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEPLOYMENTGROUP(self):
            return self.getToken(StructurizrParser.DEPLOYMENTGROUP, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_deploymentGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeploymentGroup" ):
                listener.enterDeploymentGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeploymentGroup" ):
                listener.exitDeploymentGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeploymentGroup" ):
                return visitor.visitDeploymentGroup(self)
            else:
                return visitor.visitChildren(self)




    def deploymentGroup(self):

        localctx = StructurizrParser.DeploymentGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_deploymentGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 675
                self.identifier()


            self.state = 678
            self.match(StructurizrParser.DEPLOYMENTGROUP)
            self.state = 679
            self.name()
            self.state = 680
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerInstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINERINSTANCE(self):
            return self.getToken(StructurizrParser.CONTAINERINSTANCE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def deploymentGroups(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentGroupsContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def container_inst_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Container_inst_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Container_inst_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_containerInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainerInstance" ):
                listener.enterContainerInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainerInstance" ):
                listener.exitContainerInstance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerInstance" ):
                return visitor.visitContainerInstance(self)
            else:
                return visitor.visitChildren(self)




    def containerInstance(self):

        localctx = StructurizrParser.ContainerInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_containerInstance)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 682
                self.identifier()


            self.state = 685
            self.match(StructurizrParser.CONTAINERINSTANCE)
            self.state = 686
            self.name()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0):
                self.state = 687
                self.deploymentGroups()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 688
                    self.tags()




            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 693
                self.openCurly()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425975) != 0):
                    self.state = 694
                    self.container_inst_body()
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 700
                self.closeCurly()


            self.state = 704
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_inst_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def healthCheck(self):
            return self.getTypedRuleContext(StructurizrParser.HealthCheckContext,0)


        def environment(self):
            return self.getTypedRuleContext(StructurizrParser.EnvironmentContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_container_inst_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_inst_body" ):
                listener.enterContainer_inst_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_inst_body" ):
                listener.exitContainer_inst_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainer_inst_body" ):
                return visitor.visitContainer_inst_body(self)
            else:
                return visitor.visitChildren(self)




    def container_inst_body(self):

        localctx = StructurizrParser.Container_inst_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_container_inst_body)
        try:
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 707
                self.description()
                self.state = 708
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.match(StructurizrParser.TAGS)
                self.state = 711
                self.tags()
                self.state = 712
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 714
                self.relationship()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 715
                self.url()
                self.state = 716
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 718
                self.properties()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 719
                self.perspectives()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 720
                self.healthCheck()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 721
                self.environment()
                self.state = 722
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 724
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HealthCheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def interval(self):
            return self.getTypedRuleContext(StructurizrParser.IntervalContext,0)


        def timeout(self):
            return self.getTypedRuleContext(StructurizrParser.TimeoutContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_healthCheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHealthCheck" ):
                listener.enterHealthCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHealthCheck" ):
                listener.exitHealthCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHealthCheck" ):
                return visitor.visitHealthCheck(self)
            else:
                return visitor.visitChildren(self)




    def healthCheck(self):

        localctx = StructurizrParser.HealthCheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_healthCheck)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(StructurizrParser.T__1)
            self.state = 728
            self.name()
            self.state = 729
            self.match(StructurizrParser.URLTEXT)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 730
                self.interval()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 731
                    self.timeout()




            self.state = 736
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = StructurizrParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(StructurizrParser.POSITIVE_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_timeout

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeout" ):
                listener.enterTimeout(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeout" ):
                listener.exitTimeout(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeout" ):
                return visitor.visitTimeout(self)
            else:
                return visitor.visitChildren(self)




    def timeout(self):

        localctx = StructurizrParser.TimeoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_timeout)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(StructurizrParser.POSITIVE_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationshipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHTARROW(self):
            return self.getToken(StructurizrParser.RIGHTARROW, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.NameContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.NameContext,i)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def technology(self):
            return self.getTypedRuleContext(StructurizrParser.TechnologyContext,0)


        def relationship_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Relationship_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Relationship_bodyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_relationship

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationship" ):
                listener.enterRelationship(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationship" ):
                listener.exitRelationship(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationship" ):
                return visitor.visitRelationship(self)
            else:
                return visitor.visitChildren(self)




    def relationship(self):

        localctx = StructurizrParser.RelationshipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_relationship)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0):
                self.state = 742
                self.name()


            self.state = 745
            self.match(StructurizrParser.RIGHTARROW)
            self.state = 746
            self.name()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 747
                self.description()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 748
                    self.technology()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184:
                        self.state = 749
                        self.tags()






            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 756
                self.openCurly()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067980257524514807) != 0):
                    self.state = 757
                    self.relationship_body()
                    self.state = 762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 763
                self.closeCurly()


            self.state = 767
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relationship_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def url(self):
            return self.getTypedRuleContext(StructurizrParser.UrlContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def environment(self):
            return self.getTypedRuleContext(StructurizrParser.EnvironmentContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_relationship_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationship_body" ):
                listener.enterRelationship_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationship_body" ):
                listener.exitRelationship_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationship_body" ):
                return visitor.visitRelationship_body(self)
            else:
                return visitor.visitChildren(self)




    def relationship_body(self):

        localctx = StructurizrParser.Relationship_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_relationship_body)
        try:
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.match(StructurizrParser.TAGS)
                self.state = 770
                self.tags()
                self.state = 771
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self.url()
                self.state = 774
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 776
                self.properties()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 777
                self.perspectives()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 778
                self.environment()
                self.state = 779
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 781
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerspectivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSPECTIVES(self):
            return self.getToken(StructurizrParser.PERSPECTIVES, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def perspectives_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Perspectives_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Perspectives_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_perspectives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerspectives" ):
                listener.enterPerspectives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerspectives" ):
                listener.exitPerspectives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerspectives" ):
                return visitor.visitPerspectives(self)
            else:
                return visitor.visitChildren(self)




    def perspectives(self):

        localctx = StructurizrParser.PerspectivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_perspectives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(StructurizrParser.PERSPECTIVES)
            self.state = 785
            self.openCurly()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0):
                self.state = 786
                self.perspectives_body()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 792
            self.closeCurly()
            self.state = 793
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Perspectives_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_perspectives_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerspectives_body" ):
                listener.enterPerspectives_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerspectives_body" ):
                listener.exitPerspectives_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerspectives_body" ):
                return visitor.visitPerspectives_body(self)
            else:
                return visitor.visitChildren(self)




    def perspectives_body(self):

        localctx = StructurizrParser.Perspectives_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_perspectives_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.name()
            self.state = 796
            self.description()
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 4865013497466978561) != 0):
                self.state = 797
                self.value()


            self.state = 800
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEWS(self):
            return self.getToken(StructurizrParser.VIEWS, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def views_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Views_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Views_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_views

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViews" ):
                listener.enterViews(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViews" ):
                listener.exitViews(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViews" ):
                return visitor.visitViews(self)
            else:
                return visitor.visitChildren(self)




    def views(self):

        localctx = StructurizrParser.ViewsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_views)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(StructurizrParser.VIEWS)
            self.state = 803
            self.openCurly()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 281487861612544) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 4611686001247784449) != 0) or _la==186 or _la==196:
                self.state = 804
                self.views_body()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 810
            self.closeCurly()
            self.state = 811
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Views_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def systemLandscapeView(self):
            return self.getTypedRuleContext(StructurizrParser.SystemLandscapeViewContext,0)


        def systemContextView(self):
            return self.getTypedRuleContext(StructurizrParser.SystemContextViewContext,0)


        def containerView(self):
            return self.getTypedRuleContext(StructurizrParser.ContainerViewContext,0)


        def componentView(self):
            return self.getTypedRuleContext(StructurizrParser.ComponentViewContext,0)


        def filteredView(self):
            return self.getTypedRuleContext(StructurizrParser.FilteredViewContext,0)


        def relationshipView(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipViewContext,0)


        def elementView(self):
            return self.getTypedRuleContext(StructurizrParser.ElementViewContext,0)


        def dynamicView(self):
            return self.getTypedRuleContext(StructurizrParser.DynamicViewContext,0)


        def deploymentView(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentViewContext,0)


        def customView(self):
            return self.getTypedRuleContext(StructurizrParser.CustomViewContext,0)


        def imageView(self):
            return self.getTypedRuleContext(StructurizrParser.ImageViewContext,0)


        def styles(self):
            return self.getTypedRuleContext(StructurizrParser.StylesContext,0)


        def theme(self):
            return self.getTypedRuleContext(StructurizrParser.ThemeContext,0)


        def themes(self):
            return self.getTypedRuleContext(StructurizrParser.ThemesContext,0)


        def branding(self):
            return self.getTypedRuleContext(StructurizrParser.BrandingContext,0)


        def terminology(self):
            return self.getTypedRuleContext(StructurizrParser.TerminologyContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_views_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViews_body" ):
                listener.enterViews_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViews_body" ):
                listener.exitViews_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViews_body" ):
                return visitor.visitViews_body(self)
            else:
                return visitor.visitChildren(self)




    def views_body(self):

        localctx = StructurizrParser.Views_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_views_body)
        try:
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.systemLandscapeView()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 814
                self.systemContextView()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 815
                self.containerView()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 816
                self.componentView()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 817
                self.filteredView()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 818
                self.relationshipView()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 819
                self.elementView()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 820
                self.dynamicView()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 821
                self.deploymentView()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 822
                self.customView()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 823
                self.imageView()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 824
                self.styles()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 825
                self.theme()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 826
                self.themes()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 827
                self.branding()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 828
                self.terminology()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 829
                self.properties()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 830
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemLandscapeViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEMLANDSCAPE(self):
            return self.getToken(StructurizrParser.SYSTEMLANDSCAPE, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def view_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.View_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.View_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_systemLandscapeView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemLandscapeView" ):
                listener.enterSystemLandscapeView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemLandscapeView" ):
                listener.exitSystemLandscapeView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystemLandscapeView" ):
                return visitor.visitSystemLandscapeView(self)
            else:
                return visitor.visitChildren(self)




    def systemLandscapeView(self):

        localctx = StructurizrParser.SystemLandscapeViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_systemLandscapeView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 833
                self.identifier()


            self.state = 836
            self.match(StructurizrParser.SYSTEMLANDSCAPE)
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 837
                self.key()


            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 840
                self.description()


            self.state = 843
            self.openCurly()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 211109202100208) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 5791629120764905987) != 0) or _la==190 or _la==196:
                self.state = 844
                self.view_body()
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 850
            self.closeCurly()
            self.state = 851
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def include(self):
            return self.getTypedRuleContext(StructurizrParser.IncludeContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.NEWLINE)
            else:
                return self.getToken(StructurizrParser.NEWLINE, i)

        def exclude(self):
            return self.getTypedRuleContext(StructurizrParser.ExcludeContext,0)


        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def title(self):
            return self.getTypedRuleContext(StructurizrParser.TitleContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def paperSize(self):
            return self.getTypedRuleContext(StructurizrParser.PaperSizeContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def dimensions(self):
            return self.getTypedRuleContext(StructurizrParser.DimensionsContext,0)


        def automaticLayout(self):
            return self.getTypedRuleContext(StructurizrParser.AutomaticLayoutContext,0)


        def default(self):
            return self.getTypedRuleContext(StructurizrParser.DefaultContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def animation(self):
            return self.getTypedRuleContext(StructurizrParser.AnimationContext,0)


        def theme(self):
            return self.getTypedRuleContext(StructurizrParser.ThemeContext,0)


        def themes(self):
            return self.getTypedRuleContext(StructurizrParser.ThemesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_view_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_body" ):
                listener.enterView_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_body" ):
                listener.exitView_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_body" ):
                return visitor.visitView_body(self)
            else:
                return visitor.visitChildren(self)




    def view_body(self):

        localctx = StructurizrParser.View_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_view_body)
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.include()
                self.state = 854
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.exclude()
                self.state = 857
                self.match(StructurizrParser.NEWLINE)
                self.state = 858
                self.match(StructurizrParser.T__2)
                self.state = 859
                self.value()
                self.state = 860
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 862
                self.title()
                self.state = 863
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 865
                self.properties()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 866
                self.paperSize()
                self.state = 867
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 869
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 870
                self.description()
                self.state = 871
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 873
                self.dimensions()
                self.state = 874
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 876
                self.automaticLayout()
                self.state = 877
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 879
                self.default()
                self.state = 880
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 882
                self.relationship()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 883
                self.animation()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 884
                self.theme()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 885
                self.themes()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 886
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PaperSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StructurizrParser.RULE_paperSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPaperSize" ):
                listener.enterPaperSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPaperSize" ):
                listener.exitPaperSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPaperSize" ):
                return visitor.visitPaperSize(self)
            else:
                return visitor.visitChildren(self)




    def paperSize(self):

        localctx = StructurizrParser.PaperSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_paperSize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16777200) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemContextViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEMCONTEXT(self):
            return self.getToken(StructurizrParser.SYSTEMCONTEXT, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def view_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.View_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.View_bodyContext,i)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_systemContextView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemContextView" ):
                listener.enterSystemContextView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemContextView" ):
                listener.exitSystemContextView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystemContextView" ):
                return visitor.visitSystemContextView(self)
            else:
                return visitor.visitChildren(self)




    def systemContextView(self):

        localctx = StructurizrParser.SystemContextViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_systemContextView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 891
                self.identifier()


            self.state = 894
            self.match(StructurizrParser.SYSTEMCONTEXT)
            self.state = 895
            self.name()
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 896
                self.key()
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 897
                    self.description()




            self.state = 902
            self.openCurly()
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 211109202100208) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 5791629120764905987) != 0) or _la==190 or _la==196:
                self.state = 903
                self.view_body()
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 909
            self.closeCurly()
            self.state = 910
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AutomaticLayoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTOLAYOUT(self):
            return self.getToken(StructurizrParser.AUTOLAYOUT, 0)

        def rankSeparation(self):
            return self.getTypedRuleContext(StructurizrParser.RankSeparationContext,0)


        def nodeSeparation(self):
            return self.getTypedRuleContext(StructurizrParser.NodeSeparationContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_automaticLayout

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutomaticLayout" ):
                listener.enterAutomaticLayout(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutomaticLayout" ):
                listener.exitAutomaticLayout(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAutomaticLayout" ):
                return visitor.visitAutomaticLayout(self)
            else:
                return visitor.visitChildren(self)




    def automaticLayout(self):

        localctx = StructurizrParser.AutomaticLayoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_automaticLayout)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(StructurizrParser.AUTOLAYOUT)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 251658240) != 0):
                self.state = 913
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 251658240) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 916
                self.rankSeparation()
                self.state = 917
                self.nodeSeparation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RankSeparationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_rankSeparation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRankSeparation" ):
                listener.enterRankSeparation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRankSeparation" ):
                listener.exitRankSeparation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRankSeparation" ):
                return visitor.visitRankSeparation(self)
            else:
                return visitor.visitChildren(self)




    def rankSeparation(self):

        localctx = StructurizrParser.RankSeparationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_rankSeparation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(StructurizrParser.POSITIVE_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeSeparationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_nodeSeparation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodeSeparation" ):
                listener.enterNodeSeparation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodeSeparation" ):
                listener.exitNodeSeparation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodeSeparation" ):
                return visitor.visitNodeSeparation(self)
            else:
                return visitor.visitChildren(self)




    def nodeSeparation(self):

        localctx = StructurizrParser.NodeSeparationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_nodeSeparation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(StructurizrParser.POSITIVE_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StructurizrParser.RULE_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault" ):
                listener.enterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault" ):
                listener.exitDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault" ):
                return visitor.visitDefault(self)
            else:
                return visitor.visitChildren(self)




    def default(self):

        localctx = StructurizrParser.DefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(StructurizrParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.IDENTIFIER)
            else:
                return self.getToken(StructurizrParser.IDENTIFIER, i)

        def URLTEXT(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.URLTEXT)
            else:
                return self.getToken(StructurizrParser.URLTEXT, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude" ):
                return visitor.visitInclude(self)
            else:
                return visitor.visitChildren(self)




    def include(self):

        localctx = StructurizrParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_include)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(StructurizrParser.T__28)
            self.state = 929 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 928
                _la = self._input.LA(1)
                if not(_la==30 or _la==186 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 931 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==30 or _la==186 or _la==190):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExcludeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.IDENTIFIER)
            else:
                return self.getToken(StructurizrParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_exclude

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclude" ):
                listener.enterExclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclude" ):
                listener.exitExclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclude" ):
                return visitor.visitExclude(self)
            else:
                return visitor.visitChildren(self)




    def exclude(self):

        localctx = StructurizrParser.ExcludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_exclude)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(StructurizrParser.T__30)
            self.state = 935 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 934
                self.match(StructurizrParser.IDENTIFIER)
                self.state = 937 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==186):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER(self):
            return self.getToken(StructurizrParser.CONTAINER, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def view_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.View_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.View_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_containerView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainerView" ):
                listener.enterContainerView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainerView" ):
                listener.exitContainerView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerView" ):
                return visitor.visitContainerView(self)
            else:
                return visitor.visitChildren(self)




    def containerView(self):

        localctx = StructurizrParser.ContainerViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_containerView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 939
                self.identifier()


            self.state = 942
            self.match(StructurizrParser.CONTAINER)
            self.state = 944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 943
                self.name()


            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 946
                self.key()


            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 949
                self.description()


            self.state = 952
            self.openCurly()
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 211109202100208) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 5791629120764905987) != 0) or _la==190 or _la==196:
                self.state = 953
                self.view_body()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 959
            self.closeCurly()
            self.state = 960
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPONENT(self):
            return self.getToken(StructurizrParser.COMPONENT, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def view_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.View_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.View_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_componentView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentView" ):
                listener.enterComponentView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentView" ):
                listener.exitComponentView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComponentView" ):
                return visitor.visitComponentView(self)
            else:
                return visitor.visitChildren(self)




    def componentView(self):

        localctx = StructurizrParser.ComponentViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_componentView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 962
                self.identifier()


            self.state = 965
            self.match(StructurizrParser.COMPONENT)
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 966
                self.name()


            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 969
                self.key()


            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 972
                self.description()


            self.state = 975
            self.openCurly()
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 211109202100208) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 5791629120764905987) != 0) or _la==190 or _la==196:
                self.state = 976
                self.view_body()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 982
            self.closeCurly()
            self.state = 983
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilteredViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.KeyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.KeyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def include(self):
            return self.getTypedRuleContext(StructurizrParser.IncludeContext,0)


        def exclude(self):
            return self.getTypedRuleContext(StructurizrParser.ExcludeContext,0)


        def filtered_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Filtered_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Filtered_bodyContext,i)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_filteredView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilteredView" ):
                listener.enterFilteredView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilteredView" ):
                listener.exitFilteredView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilteredView" ):
                return visitor.visitFilteredView(self)
            else:
                return visitor.visitChildren(self)




    def filteredView(self):

        localctx = StructurizrParser.FilteredViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_filteredView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(StructurizrParser.T__31)
            self.state = 986
            self.key()
            self.state = 989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.state = 987
                self.include()
                pass
            elif token in [31]:
                self.state = 988
                self.exclude()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 991
            self.tags()
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 992
                self.key()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 993
                    self.description()




            self.state = 998
            self.openCurly()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9223372036821221371) != 0):
                self.state = 999
                self.filtered_body()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1005
            self.closeCurly()
            self.state = 1006
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filtered_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def default(self):
            return self.getTypedRuleContext(StructurizrParser.DefaultContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def title(self):
            return self.getTypedRuleContext(StructurizrParser.TitleContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_filtered_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiltered_body" ):
                listener.enterFiltered_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiltered_body" ):
                listener.exitFiltered_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFiltered_body" ):
                return visitor.visitFiltered_body(self)
            else:
                return visitor.visitChildren(self)




    def filtered_body(self):

        localctx = StructurizrParser.Filtered_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_filtered_body)
        try:
            self.state = 1020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self.default()
                self.state = 1009
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.title()
                self.state = 1012
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1014
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1015
                self.description()
                self.state = 1016
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1018
                self.properties()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1019
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def dynamicView_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.DynamicView_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.DynamicView_bodyContext,i)


        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_dynamicView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicView" ):
                listener.enterDynamicView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicView" ):
                listener.exitDynamicView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicView" ):
                return visitor.visitDynamicView(self)
            else:
                return visitor.visitChildren(self)




    def dynamicView(self):

        localctx = StructurizrParser.DynamicViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_dynamicView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(StructurizrParser.T__32)
            self.state = 1024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1023
                _la = self._input.LA(1)
                if not(_la==30 or _la==186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1026
                self.key()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 1027
                    self.description()




            self.state = 1032
            self.openCurly()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 143109115609087) != 0):
                self.state = 1033
                self.dynamicView_body()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.closeCurly()
            self.state = 1040
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicView_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_dynamicView_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicView_body" ):
                listener.enterDynamicView_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicView_body" ):
                listener.exitDynamicView_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicView_body" ):
                return visitor.visitDynamicView_body(self)
            else:
                return visitor.visitChildren(self)




    def dynamicView_body(self):

        localctx = StructurizrParser.DynamicView_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_dynamicView_body)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.relationship()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1044
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1045
                self.description()
                self.state = 1046
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1048
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeploymentEnvironmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEPLOYMENTENVIRONMENT(self):
            return self.getToken(StructurizrParser.DEPLOYMENTENVIRONMENT, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def dep_env_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Dep_env_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Dep_env_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_deploymentEnvironment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeploymentEnvironment" ):
                listener.enterDeploymentEnvironment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeploymentEnvironment" ):
                listener.exitDeploymentEnvironment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeploymentEnvironment" ):
                return visitor.visitDeploymentEnvironment(self)
            else:
                return visitor.visitChildren(self)




    def deploymentEnvironment(self):

        localctx = StructurizrParser.DeploymentEnvironmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_deploymentEnvironment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1051
                self.identifier()


            self.state = 1054
            self.match(StructurizrParser.DEPLOYMENTENVIRONMENT)
            self.state = 1055
            self.name()
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1056
                self.key()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 1057
                    self.description()




            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1062
                self.openCurly()
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 143109115609087) != 0):
                    self.state = 1063
                    self.dep_env_body()
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1069
                self.closeCurly()


            self.state = 1073
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dep_env_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def deploymentNode(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentNodeContext,0)


        def deploymentGroup(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentGroupContext,0)


        def infrastructureNode(self):
            return self.getTypedRuleContext(StructurizrParser.InfrastructureNodeContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_dep_env_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDep_env_body" ):
                listener.enterDep_env_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDep_env_body" ):
                listener.exitDep_env_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDep_env_body" ):
                return visitor.visitDep_env_body(self)
            else:
                return visitor.visitChildren(self)




    def dep_env_body(self):

        localctx = StructurizrParser.Dep_env_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_dep_env_body)
        try:
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                self.match(StructurizrParser.TAGS)
                self.state = 1076
                self.tags()
                self.state = 1077
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.deploymentNode()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.deploymentGroup()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.infrastructureNode()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1082
                self.relationship()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1083
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeploymentViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEPLOYMENT(self):
            return self.getToken(StructurizrParser.DEPLOYMENT, 0)

        def environment(self):
            return self.getTypedRuleContext(StructurizrParser.EnvironmentContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def deployment_view_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Deployment_view_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Deployment_view_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_deploymentView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeploymentView" ):
                listener.enterDeploymentView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeploymentView" ):
                listener.exitDeploymentView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeploymentView" ):
                return visitor.visitDeploymentView(self)
            else:
                return visitor.visitChildren(self)




    def deploymentView(self):

        localctx = StructurizrParser.DeploymentViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_deploymentView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1086
                self.identifier()


            self.state = 1089
            self.match(StructurizrParser.DEPLOYMENT)
            self.state = 1090
            _la = self._input.LA(1)
            if not(_la==30 or _la==186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1091
            self.environment()
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1092
                self.key()
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 1093
                    self.description()




            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1098
                self.openCurly()
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==29 or _la==46 or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 143109115609087) != 0):
                    self.state = 1099
                    self.deployment_view_body()
                    self.state = 1104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1105
                self.closeCurly()


            self.state = 1109
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deployment_view_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def deploymentNode(self):
            return self.getTypedRuleContext(StructurizrParser.DeploymentNodeContext,0)


        def infrastructureNode(self):
            return self.getTypedRuleContext(StructurizrParser.InfrastructureNodeContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def include(self):
            return self.getTypedRuleContext(StructurizrParser.IncludeContext,0)


        def automaticLayout(self):
            return self.getTypedRuleContext(StructurizrParser.AutomaticLayoutContext,0)


        def animation(self):
            return self.getTypedRuleContext(StructurizrParser.AnimationContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_deployment_view_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeployment_view_body" ):
                listener.enterDeployment_view_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeployment_view_body" ):
                listener.exitDeployment_view_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeployment_view_body" ):
                return visitor.visitDeployment_view_body(self)
            else:
                return visitor.visitChildren(self)




    def deployment_view_body(self):

        localctx = StructurizrParser.Deployment_view_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_deployment_view_body)
        try:
            self.state = 1130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.match(StructurizrParser.TAGS)
                self.state = 1112
                self.tags()
                self.state = 1113
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.deploymentNode()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.infrastructureNode()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.relationship()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1119
                self.description()
                self.state = 1120
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1122
                self.include()
                self.state = 1123
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1125
                self.automaticLayout()
                self.state = 1126
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1128
                self.animation()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1129
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_environment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironment" ):
                listener.enterEnvironment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironment" ):
                listener.exitEnvironment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironment" ):
                return visitor.visitEnvironment(self)
            else:
                return visitor.visitChildren(self)




    def environment(self):

        localctx = StructurizrParser.EnvironmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_environment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImageViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMAGE(self):
            return self.getToken(StructurizrParser.IMAGE, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def imageView_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.ImageView_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.ImageView_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_imageView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImageView" ):
                listener.enterImageView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImageView" ):
                listener.exitImageView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImageView" ):
                return visitor.visitImageView(self)
            else:
                return visitor.visitChildren(self)




    def imageView(self):

        localctx = StructurizrParser.ImageViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_imageView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(StructurizrParser.IMAGE)
            self.state = 1137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.state = 1135
                self.match(StructurizrParser.T__29)
                pass
            elif token in [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 184, 186, 190]:
                self.state = 1136
                self.name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1139
                self.key()


            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1142
                self.openCurly()
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 120527519744) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9223372036284350459) != 0):
                    self.state = 1143
                    self.imageView_body()
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1149
                self.closeCurly()


            self.state = 1153
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImageView_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def IMAGE(self):
            return self.getToken(StructurizrParser.IMAGE, 0)

        def default(self):
            return self.getTypedRuleContext(StructurizrParser.DefaultContext,0)


        def title(self):
            return self.getTypedRuleContext(StructurizrParser.TitleContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_imageView_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImageView_body" ):
                listener.enterImageView_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImageView_body" ):
                listener.exitImageView_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImageView_body" ):
                return visitor.visitImageView_body(self)
            else:
                return visitor.visitChildren(self)




    def imageView_body(self):

        localctx = StructurizrParser.ImageView_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_imageView_body)
        try:
            self.state = 1181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.match(StructurizrParser.T__33)
                self.state = 1156
                self.match(StructurizrParser.URLTEXT)
                self.state = 1157
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.match(StructurizrParser.T__34)
                self.state = 1159
                self.match(StructurizrParser.URLTEXT)
                self.state = 1160
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1161
                self.match(StructurizrParser.T__35)
                self.state = 1162
                self.value()
                self.state = 1163
                self.match(StructurizrParser.URLTEXT)
                self.state = 1164
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1166
                self.match(StructurizrParser.IMAGE)
                self.state = 1167
                self.match(StructurizrParser.URLTEXT)
                self.state = 1168
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1169
                self.default()
                self.state = 1170
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1172
                self.title()
                self.state = 1173
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1175
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1176
                self.description()
                self.state = 1177
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1179
                self.properties()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1180
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(StructurizrParser.ELEMENT, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def custom_element_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Custom_element_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Custom_element_bodyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_customElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomElement" ):
                listener.enterCustomElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomElement" ):
                listener.exitCustomElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomElement" ):
                return visitor.visitCustomElement(self)
            else:
                return visitor.visitChildren(self)




    def customElement(self):

        localctx = StructurizrParser.CustomElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_customElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.match(StructurizrParser.ELEMENT)
            self.state = 1184
            self.name()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1185
                self.description()
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 1186
                    self.tags()




            self.state = 1191
            self.openCurly()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152425983) != 0):
                self.state = 1192
                self.custom_element_body()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1198
            self.closeCurly()
            self.state = 1199
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Custom_element_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def perspectives(self):
            return self.getTypedRuleContext(StructurizrParser.PerspectivesContext,0)


        def relationship(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_custom_element_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustom_element_body" ):
                listener.enterCustom_element_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustom_element_body" ):
                listener.exitCustom_element_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustom_element_body" ):
                return visitor.visitCustom_element_body(self)
            else:
                return visitor.visitChildren(self)




    def custom_element_body(self):

        localctx = StructurizrParser.Custom_element_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_custom_element_body)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1202
                self.description()
                self.state = 1203
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.tags()
                self.state = 1206
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1208
                self.properties()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1209
                self.perspectives()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1210
                self.relationship()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1211
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENTVIEW(self):
            return self.getToken(StructurizrParser.ELEMENTVIEW, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def metadata(self):
            return self.getTypedRuleContext(StructurizrParser.MetadataContext,0)


        def elementView_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.ElementView_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.ElementView_bodyContext,i)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_elementView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementView" ):
                listener.enterElementView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementView" ):
                listener.exitElementView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementView" ):
                return visitor.visitElementView(self)
            else:
                return visitor.visitChildren(self)




    def elementView(self):

        localctx = StructurizrParser.ElementViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_elementView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(StructurizrParser.ELEMENTVIEW)
            self.state = 1215
            self.name()
            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==179:
                self.state = 1216
                self.metadata()
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184 or _la==186:
                    self.state = 1217
                    self.description()
                    self.state = 1219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184:
                        self.state = 1218
                        self.tags()






            self.state = 1225
            self.openCurly()
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 962609545216) != 0) or _la==196:
                self.state = 1226
                self.elementView_body()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.closeCurly()
            self.state = 1233
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementView_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def include(self):
            return self.getTypedRuleContext(StructurizrParser.IncludeContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_elementView_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementView_body" ):
                listener.enterElementView_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementView_body" ):
                listener.exitElementView_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementView_body" ):
                return visitor.visitElementView_body(self)
            else:
                return visitor.visitChildren(self)




    def elementView_body(self):

        localctx = StructurizrParser.ElementView_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_elementView_body)
        try:
            self.state = 1248
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1235
                self.include()
                self.state = 1236
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.match(StructurizrParser.T__36)
                self.state = 1239
                self.match(StructurizrParser.IDENTIFIER)
                self.state = 1240
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1241
                self.match(StructurizrParser.T__37)
                self.state = 1242
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1243
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1244
                self.match(StructurizrParser.T__38)
                self.state = 1245
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1246
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1247
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(StructurizrParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadata" ):
                return visitor.visitMetadata(self)
            else:
                return visitor.visitChildren(self)




    def metadata(self):

        localctx = StructurizrParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(StructurizrParser.BOOLEAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationshipViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIONSHIP(self):
            return self.getToken(StructurizrParser.RELATIONSHIP, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def relationshipView_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.RelationshipView_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.RelationshipView_bodyContext,i)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_relationshipView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationshipView" ):
                listener.enterRelationshipView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationshipView" ):
                listener.exitRelationshipView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationshipView" ):
                return visitor.visitRelationshipView(self)
            else:
                return visitor.visitChildren(self)




    def relationshipView(self):

        localctx = StructurizrParser.RelationshipViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_relationshipView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(StructurizrParser.RELATIONSHIP)
            self.state = 1253
            self.name()
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1254
                self.description()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 1255
                    self.tags()




            self.state = 1260
            self.openCurly()
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 69269232549896) != 0) or _la==158 or _la==196:
                self.state = 1261
                self.relationshipView_body()
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1267
            self.closeCurly()
            self.state = 1268
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationshipView_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def BOOLEAN(self):
            return self.getToken(StructurizrParser.BOOLEAN, 0)

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def array(self):
            return self.getTypedRuleContext(StructurizrParser.ArrayContext,0)


        def routingType(self):
            return self.getTypedRuleContext(StructurizrParser.RoutingTypeContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_relationshipView_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationshipView_body" ):
                listener.enterRelationshipView_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationshipView_body" ):
                listener.exitRelationshipView_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationshipView_body" ):
                return visitor.visitRelationshipView_body(self)
            else:
                return visitor.visitChildren(self)




    def relationshipView_body(self):

        localctx = StructurizrParser.RelationshipView_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_relationshipView_body)
        try:
            self.state = 1298
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1270
                self.match(StructurizrParser.T__39)
                self.state = 1271
                self.tags()
                self.state = 1272
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1274
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1275
                self.description()
                self.state = 1276
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1278
                self.match(StructurizrParser.T__40)
                self.state = 1279
                self.match(StructurizrParser.BOOLEAN)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1280
                self.match(StructurizrParser.T__2)
                self.state = 1281
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1282
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1283
                self.match(StructurizrParser.T__41)
                self.state = 1284
                self.array()
                self.state = 1285
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1287
                self.match(StructurizrParser.T__42)
                self.state = 1288
                self.routingType()
                self.state = 1289
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1291
                self.match(StructurizrParser.T__43)
                self.state = 1292
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1293
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1294
                self.match(StructurizrParser.T__44)
                self.state = 1295
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1296
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1297
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIVE_INT(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.POSITIVE_INT)
            else:
                return self.getToken(StructurizrParser.POSITIVE_INT, i)

        def COMMA(self):
            return self.getToken(StructurizrParser.COMMA, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPair" ):
                listener.enterPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPair" ):
                listener.exitPair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPair" ):
                return visitor.visitPair(self)
            else:
                return visitor.visitChildren(self)




    def pair(self):

        localctx = StructurizrParser.PairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(StructurizrParser.POSITIVE_INT)
            self.state = 1301
            self.match(StructurizrParser.COMMA)
            self.state = 1302
            self.match(StructurizrParser.POSITIVE_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(StructurizrParser.LBRACKET, 0)

        def pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.PairContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.PairContext,i)


        def RBRACKET(self):
            return self.getToken(StructurizrParser.RBRACKET, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.SEMICOLON)
            else:
                return self.getToken(StructurizrParser.SEMICOLON, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray" ):
                return visitor.visitArray(self)
            else:
                return visitor.visitChildren(self)




    def array(self):

        localctx = StructurizrParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.match(StructurizrParser.LBRACKET)
            self.state = 1305
            self.pair()
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==193:
                self.state = 1306
                self.match(StructurizrParser.SEMICOLON)
                self.state = 1307
                self.pair()
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1313
            self.match(StructurizrParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnimationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def animation_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Animation_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Animation_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_animation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnimation" ):
                listener.enterAnimation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnimation" ):
                listener.exitAnimation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnimation" ):
                return visitor.visitAnimation(self)
            else:
                return visitor.visitChildren(self)




    def animation(self):

        localctx = StructurizrParser.AnimationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_animation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(StructurizrParser.T__45)
            self.state = 1316
            self.openCurly()
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==186:
                self.state = 1317
                self.animation_body()
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1323
            self.closeCurly()
            self.state = 1324
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Animation_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.IDENTIFIER)
            else:
                return self.getToken(StructurizrParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_animation_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnimation_body" ):
                listener.enterAnimation_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnimation_body" ):
                listener.exitAnimation_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnimation_body" ):
                return visitor.visitAnimation_body(self)
            else:
                return visitor.visitChildren(self)




    def animation_body(self):

        localctx = StructurizrParser.Animation_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_animation_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1326
                self.match(StructurizrParser.IDENTIFIER)
                self.state = 1329 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==186):
                    break

            self.state = 1331
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimensionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.NUMBER)
            else:
                return self.getToken(StructurizrParser.NUMBER, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_dimensions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensions" ):
                listener.enterDimensions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensions" ):
                listener.exitDimensions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensions" ):
                return visitor.visitDimensions(self)
            else:
                return visitor.visitChildren(self)




    def dimensions(self):

        localctx = StructurizrParser.DimensionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_dimensions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(StructurizrParser.T__46)
            self.state = 1334
            self.match(StructurizrParser.NUMBER)
            self.state = 1335
            self.match(StructurizrParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURATION(self):
            return self.getToken(StructurizrParser.CONFIGURATION, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def configuration_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Configuration_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Configuration_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfiguration" ):
                listener.enterConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfiguration" ):
                listener.exitConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfiguration" ):
                return visitor.visitConfiguration(self)
            else:
                return visitor.visitChildren(self)




    def configuration(self):

        localctx = StructurizrParser.ConfigurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(StructurizrParser.CONFIGURATION)
            self.state = 1338
            self.openCurly()
            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 72057594037960713) != 0) or _la==196:
                self.state = 1339
                self.configuration_body()
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1345
            self.closeCurly()
            self.state = 1346
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Configuration_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scope(self):
            return self.getTypedRuleContext(StructurizrParser.ScopeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(StructurizrParser.VisibilityContext,0)


        def users(self):
            return self.getTypedRuleContext(StructurizrParser.UsersContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_configuration_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfiguration_body" ):
                listener.enterConfiguration_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfiguration_body" ):
                listener.exitConfiguration_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfiguration_body" ):
                return visitor.visitConfiguration_body(self)
            else:
                return visitor.visitChildren(self)




    def configuration_body(self):

        localctx = StructurizrParser.Configuration_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_configuration_body)
        try:
            self.state = 1353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1348
                self.scope()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1349
                self.visibility()
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1350
                self.users()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1351
                self.properties()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1352
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StylesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STYLES(self):
            return self.getToken(StructurizrParser.STYLES, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def style_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Style_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Style_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_styles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStyles" ):
                listener.enterStyles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStyles" ):
                listener.exitStyles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStyles" ):
                return visitor.visitStyles(self)
            else:
                return visitor.visitChildren(self)




    def styles(self):

        localctx = StructurizrParser.StylesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_styles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(StructurizrParser.STYLES)
            self.state = 1356
            self.openCurly()
            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & 68719476865) != 0):
                self.state = 1357
                self.style_body()
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1363
            self.closeCurly()
            self.state = 1364
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Style_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementStyle(self):
            return self.getTypedRuleContext(StructurizrParser.ElementStyleContext,0)


        def relationshipStyle(self):
            return self.getTypedRuleContext(StructurizrParser.RelationshipStyleContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_style_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStyle_body" ):
                listener.enterStyle_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStyle_body" ):
                listener.exitStyle_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStyle_body" ):
                return visitor.visitStyle_body(self)
            else:
                return visitor.visitChildren(self)




    def style_body(self):

        localctx = StructurizrParser.Style_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_style_body)
        try:
            self.state = 1369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1366
                self.elementStyle()
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.relationshipStyle()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1368
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def key(self):
            return self.getTypedRuleContext(StructurizrParser.KeyContext,0)


        def custom_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Custom_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Custom_bodyContext,i)


        def title(self):
            return self.getTypedRuleContext(StructurizrParser.TitleContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_customView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomView" ):
                listener.enterCustomView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomView" ):
                listener.exitCustomView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomView" ):
                return visitor.visitCustomView(self)
            else:
                return visitor.visitChildren(self)




    def customView(self):

        localctx = StructurizrParser.CustomViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_customView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(StructurizrParser.T__47)
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1372
                self.key()
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1373
                    self.title()
                    self.state = 1375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184 or _la==186:
                        self.state = 1374
                        self.description()






            self.state = 1381
            self.openCurly()
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 70371696967680) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9223372036821155835) != 0):
                self.state = 1382
                self.custom_body()
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1388
            self.closeCurly()
            self.state = 1389
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Custom_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def include(self):
            return self.getTypedRuleContext(StructurizrParser.IncludeContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def exclude(self):
            return self.getTypedRuleContext(StructurizrParser.ExcludeContext,0)


        def automaticLayout(self):
            return self.getTypedRuleContext(StructurizrParser.AutomaticLayoutContext,0)


        def default(self):
            return self.getTypedRuleContext(StructurizrParser.DefaultContext,0)


        def animation(self):
            return self.getTypedRuleContext(StructurizrParser.AnimationContext,0)


        def title(self):
            return self.getTypedRuleContext(StructurizrParser.TitleContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_custom_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustom_body" ):
                listener.enterCustom_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustom_body" ):
                listener.exitCustom_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustom_body" ):
                return visitor.visitCustom_body(self)
            else:
                return visitor.visitChildren(self)




    def custom_body(self):

        localctx = StructurizrParser.Custom_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_custom_body)
        try:
            self.state = 1413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1391
                self.include()
                self.state = 1392
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.exclude()
                self.state = 1395
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1397
                self.automaticLayout()
                self.state = 1398
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1400
                self.default()
                self.state = 1401
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1403
                self.animation()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1404
                self.title()
                self.state = 1405
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1407
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1408
                self.description()
                self.state = 1409
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1411
                self.properties()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1412
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementStyleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(StructurizrParser.ELEMENT, 0)

        def tag(self):
            return self.getTypedRuleContext(StructurizrParser.TagContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def element_style_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Element_style_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Element_style_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_elementStyle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementStyle" ):
                listener.enterElementStyle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementStyle" ):
                listener.exitElementStyle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementStyle" ):
                return visitor.visitElementStyle(self)
            else:
                return visitor.visitChildren(self)




    def elementStyle(self):

        localctx = StructurizrParser.ElementStyleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_elementStyle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(StructurizrParser.ELEMENT)
            self.state = 1416
            self.tag()
            self.state = 1417
            self.openCurly()
            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9222809086901354496) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9223372036821221375) != 0):
                self.state = 1418
                self.element_style_body()
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1424
            self.closeCurly()
            self.state = 1425
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_style_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def shapetype(self):
            return self.getTypedRuleContext(StructurizrParser.ShapetypeContext,0)


        def BOOLEAN(self):
            return self.getToken(StructurizrParser.BOOLEAN, 0)

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def styleType(self):
            return self.getTypedRuleContext(StructurizrParser.StyleTypeContext,0)


        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_element_style_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_style_body" ):
                listener.enterElement_style_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_style_body" ):
                listener.exitElement_style_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_style_body" ):
                return visitor.visitElement_style_body(self)
            else:
                return visitor.visitChildren(self)




    def element_style_body(self):

        localctx = StructurizrParser.Element_style_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_element_style_body)
        try:
            self.state = 1483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1427
                self.match(StructurizrParser.T__48)
                self.state = 1428
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1429
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.match(StructurizrParser.T__49)
                self.state = 1431
                self.shapetype()
                self.state = 1432
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1434
                self.match(StructurizrParser.T__50)
                self.state = 1435
                self.match(StructurizrParser.BOOLEAN)
                self.state = 1436
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1437
                self.match(StructurizrParser.T__51)
                self.state = 1438
                self.match(StructurizrParser.URLTEXT)
                self.state = 1439
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1440
                self.match(StructurizrParser.T__52)
                self.state = 1441
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1442
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1443
                self.match(StructurizrParser.T__53)
                self.state = 1444
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1445
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1446
                self.match(StructurizrParser.T__54)
                self.state = 1447
                self.value()
                self.state = 1448
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1450
                self.match(StructurizrParser.T__55)
                self.state = 1451
                self.value()
                self.state = 1452
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1454
                self.match(StructurizrParser.T__56)
                self.state = 1455
                self.value()
                self.state = 1456
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1458
                self.match(StructurizrParser.T__57)
                self.state = 1459
                self.value()
                self.state = 1460
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1462
                self.match(StructurizrParser.T__58)
                self.state = 1463
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1464
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1465
                self.match(StructurizrParser.T__59)
                self.state = 1466
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1467
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1468
                self.match(StructurizrParser.T__60)
                self.state = 1469
                self.styleType()
                self.state = 1470
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1472
                self.match(StructurizrParser.T__48)
                self.state = 1473
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1474
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1475
                self.match(StructurizrParser.T__61)
                self.state = 1476
                self.match(StructurizrParser.BOOLEAN)
                self.state = 1477
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1478
                self.match(StructurizrParser.DESCRIPTION)
                self.state = 1479
                self.match(StructurizrParser.BOOLEAN)
                self.state = 1480
                self.match(StructurizrParser.NEWLINE)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1481
                self.properties()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1482
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapetypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPONENT(self):
            return self.getToken(StructurizrParser.COMPONENT, 0)

        def PERSON(self):
            return self.getToken(StructurizrParser.PERSON, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_shapetype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShapetype" ):
                listener.enterShapetype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShapetype" ):
                listener.exitShapetype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShapetype" ):
                return visitor.visitShapetype(self)
            else:
                return visitor.visitChildren(self)




    def shapetype(self):

        localctx = StructurizrParser.ShapetypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_shapetype)
        self._la = 0 # Token type
        try:
            self.state = 1531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 7) != 0):
                    self.state = 1485
                    _la = self._input.LA(1)
                    if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 7) != 0):
                    self.state = 1488
                    _la = self._input.LA(1)
                    if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1491
                self.match(StructurizrParser.COMPONENT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 7) != 0):
                    self.state = 1492
                    _la = self._input.LA(1)
                    if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 7) != 0):
                    self.state = 1495
                    _la = self._input.LA(1)
                    if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                    self.state = 1498
                    _la = self._input.LA(1)
                    if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 7) != 0):
                    self.state = 1501
                    _la = self._input.LA(1)
                    if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 7) != 0):
                    self.state = 1504
                    _la = self._input.LA(1)
                    if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 7) != 0):
                    self.state = 1507
                    _la = self._input.LA(1)
                    if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 7) != 0):
                    self.state = 1510
                    _la = self._input.LA(1)
                    if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 7) != 0):
                    self.state = 1513
                    _la = self._input.LA(1)
                    if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 7) != 0):
                    self.state = 1516
                    _la = self._input.LA(1)
                    if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 7) != 0):
                    self.state = 1519
                    _la = self._input.LA(1)
                    if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1525
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [99]:
                    self.state = 1522
                    self.match(StructurizrParser.T__98)
                    pass
                elif token in [100]:
                    self.state = 1523
                    self.match(StructurizrParser.T__99)
                    self.state = 1524
                    self.match(StructurizrParser.T__100)
                    pass
                elif token in [196]:
                    pass
                else:
                    pass
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1527
                self.match(StructurizrParser.PERSON)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 7) != 0):
                    self.state = 1528
                    _la = self._input.LA(1)
                    if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationshipStyleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIONSHIP(self):
            return self.getToken(StructurizrParser.RELATIONSHIP, 0)

        def tag(self):
            return self.getTypedRuleContext(StructurizrParser.TagContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def rel_style_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Rel_style_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Rel_style_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_relationshipStyle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationshipStyle" ):
                listener.enterRelationshipStyle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationshipStyle" ):
                listener.exitRelationshipStyle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationshipStyle" ):
                return visitor.visitRelationshipStyle(self)
            else:
                return visitor.visitChildren(self)




    def relationshipStyle(self):

        localctx = StructurizrParser.RelationshipStyleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_relationshipStyle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(StructurizrParser.RELATIONSHIP)
            self.state = 1534
            self.tag()
            self.state = 1535
            self.openCurly()
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1380925031835500544) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 268435463) != 0) or _la==196:
                self.state = 1536
                self.rel_style_body()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1542
            self.closeCurly()
            self.state = 1543
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rel_style_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIVE_INT(self):
            return self.getToken(StructurizrParser.POSITIVE_INT, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def BOOLEAN(self):
            return self.getToken(StructurizrParser.BOOLEAN, 0)

        def styleType(self):
            return self.getTypedRuleContext(StructurizrParser.StyleTypeContext,0)


        def routingType(self):
            return self.getTypedRuleContext(StructurizrParser.RoutingTypeContext,0)


        def properties(self):
            return self.getTypedRuleContext(StructurizrParser.PropertiesContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_rel_style_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_style_body" ):
                listener.enterRel_style_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_style_body" ):
                listener.exitRel_style_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRel_style_body" ):
                return visitor.visitRel_style_body(self)
            else:
                return visitor.visitChildren(self)




    def rel_style_body(self):

        localctx = StructurizrParser.Rel_style_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_rel_style_body)
        try:
            self.state = 1581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.match(StructurizrParser.T__104)
                self.state = 1546
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1547
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.match(StructurizrParser.T__55)
                self.state = 1549
                self.value()
                self.state = 1550
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1552
                self.match(StructurizrParser.T__56)
                self.state = 1553
                self.value()
                self.state = 1554
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1556
                self.match(StructurizrParser.T__50)
                self.state = 1557
                self.match(StructurizrParser.BOOLEAN)
                self.state = 1558
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1559
                self.match(StructurizrParser.T__105)
                self.state = 1560
                self.styleType()
                self.state = 1561
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1563
                self.match(StructurizrParser.T__42)
                self.state = 1564
                self.routingType()
                self.state = 1565
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1567
                self.match(StructurizrParser.T__59)
                self.state = 1568
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1569
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1570
                self.match(StructurizrParser.T__52)
                self.state = 1571
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1572
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1573
                self.match(StructurizrParser.T__106)
                self.state = 1574
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1575
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1576
                self.match(StructurizrParser.T__48)
                self.state = 1577
                self.match(StructurizrParser.POSITIVE_INT)
                self.state = 1578
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1579
                self.properties()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1580
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutingTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StructurizrParser.RULE_routingType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutingType" ):
                listener.enterRoutingType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutingType" ):
                listener.exitRoutingType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutingType" ):
                return visitor.visitRoutingType(self)
            else:
                return visitor.visitChildren(self)




    def routingType(self):

        localctx = StructurizrParser.RoutingTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_routingType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            _la = self._input.LA(1)
            if not(((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StyleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StructurizrParser.RULE_styleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStyleType" ):
                listener.enterStyleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStyleType" ):
                listener.exitStyleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStyleType" ):
                return visitor.visitStyleType(self)
            else:
                return visitor.visitChildren(self)




    def styleType(self):

        localctx = StructurizrParser.StyleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_styleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 3458764513820540929) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_docsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGDOCS(self):
            return self.getToken(StructurizrParser.BANGDOCS, 0)

        def path(self):
            return self.getTypedRuleContext(StructurizrParser.PathContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_docs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_docs" ):
                listener.enterBang_docs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_docs" ):
                listener.exitBang_docs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_docs" ):
                return visitor.visitBang_docs(self)
            else:
                return visitor.visitChildren(self)




    def bang_docs(self):

        localctx = StructurizrParser.Bang_docsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_bang_docs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.match(StructurizrParser.BANGDOCS)
            self.state = 1588
            self.path()
            self.state = 1590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0):
                self.state = 1589
                self.name()


            self.state = 1592
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_adrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGADRS(self):
            return self.getToken(StructurizrParser.BANGADRS, 0)

        def path(self):
            return self.getTypedRuleContext(StructurizrParser.PathContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_adrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_adrs" ):
                listener.enterBang_adrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_adrs" ):
                listener.exitBang_adrs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_adrs" ):
                return visitor.visitBang_adrs(self)
            else:
                return visitor.visitChildren(self)




    def bang_adrs(self):

        localctx = StructurizrParser.Bang_adrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_bang_adrs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(StructurizrParser.BANGADRS)
            self.state = 1595
            self.path()
            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0):
                self.state = 1596
                self.name()


            self.state = 1599
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_identifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGIDENTIFIERS(self):
            return self.getToken(StructurizrParser.BANGIDENTIFIERS, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_identifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_identifiers" ):
                listener.enterBang_identifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_identifiers" ):
                listener.exitBang_identifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_identifiers" ):
                return visitor.visitBang_identifiers(self)
            else:
                return visitor.visitChildren(self)




    def bang_identifiers(self):

        localctx = StructurizrParser.Bang_identifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_bang_identifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.match(StructurizrParser.BANGIDENTIFIERS)
            self.state = 1602
            _la = self._input.LA(1)
            if not(_la==113 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1603
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_extendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGEXTEND(self):
            return self.getToken(StructurizrParser.BANGEXTEND, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def model_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Model_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Model_bodyContext,i)


        def softwareSystem_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.SoftwareSystem_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.SoftwareSystem_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_extend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_extend" ):
                listener.enterBang_extend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_extend" ):
                listener.exitBang_extend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_extend" ):
                return visitor.visitBang_extend(self)
            else:
                return visitor.visitChildren(self)




    def bang_extend(self):

        localctx = StructurizrParser.Bang_extendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_bang_extend)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 137707388927) != 0):
                self.state = 1605
                self.identifier()


            self.state = 1608
            self.match(StructurizrParser.BANGEXTEND)
            self.state = 1609
            self.name()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1610
                self.openCurly()
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & -9067945073152424983) != 0):
                    self.state = 1613
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1611
                        self.model_body()
                        pass

                    elif la_ == 2:
                        self.state = 1612
                        self.softwareSystem_body()
                        pass


                    self.state = 1617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1618
                self.closeCurly()


            self.state = 1622
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_impliedRelationshipsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGIMPLIEDRELATIONSHIPS(self):
            return self.getToken(StructurizrParser.BANGIMPLIEDRELATIONSHIPS, 0)

        def BOOLEAN(self):
            return self.getToken(StructurizrParser.BOOLEAN, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_impliedRelationships

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_impliedRelationships" ):
                listener.enterBang_impliedRelationships(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_impliedRelationships" ):
                listener.exitBang_impliedRelationships(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_impliedRelationships" ):
                return visitor.visitBang_impliedRelationships(self)
            else:
                return visitor.visitChildren(self)




    def bang_impliedRelationships(self):

        localctx = StructurizrParser.Bang_impliedRelationshipsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_bang_impliedRelationships)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.match(StructurizrParser.BANGIMPLIEDRELATIONSHIPS)
            self.state = 1625
            self.match(StructurizrParser.BOOLEAN)
            self.state = 1626
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGREF(self):
            return self.getToken(StructurizrParser.BANGREF, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def group_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Group_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Group_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_ref" ):
                listener.enterBang_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_ref" ):
                listener.exitBang_ref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_ref" ):
                return visitor.visitBang_ref(self)
            else:
                return visitor.visitChildren(self)




    def bang_ref(self):

        localctx = StructurizrParser.Bang_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_bang_ref)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 137707388927) != 0):
                self.state = 1628
                self.identifier()


            self.state = 1631
            self.match(StructurizrParser.BANGREF)
            self.state = 1632
            self.name()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1633
                self.openCurly()
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 140875195744255) != 0):
                    self.state = 1634
                    self.group_body()
                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1640
                self.closeCurly()


            self.state = 1644
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGSCRIPT(self):
            return self.getToken(StructurizrParser.BANGSCRIPT, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def bang_script_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Bang_script_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Bang_script_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_script" ):
                listener.enterBang_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_script" ):
                listener.exitBang_script(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_script" ):
                return visitor.visitBang_script(self)
            else:
                return visitor.visitChildren(self)




    def bang_script(self):

        localctx = StructurizrParser.Bang_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_bang_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.match(StructurizrParser.BANGSCRIPT)
            self.state = 1660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1647
                self.match(StructurizrParser.URLTEXT)
                pass

            elif la_ == 2:
                self.state = 1648
                self.name()
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 1649
                    self.openCurly()
                    self.state = 1653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 143108578738175) != 0):
                        self.state = 1650
                        self.bang_script_body()
                        self.state = 1655
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1656
                    self.closeCurly()


                pass


            self.state = 1662
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_script_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_value_pair(self):
            return self.getTypedRuleContext(StructurizrParser.Name_value_pairContext,0)


        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_script_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_script_body" ):
                listener.enterBang_script_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_script_body" ):
                listener.exitBang_script_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_script_body" ):
                return visitor.visitBang_script_body(self)
            else:
                return visitor.visitChildren(self)




    def bang_script_body(self):

        localctx = StructurizrParser.Bang_script_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_bang_script_body)
        try:
            self.state = 1668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1664
                self.name_value_pair()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.match(StructurizrParser.URLTEXT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1666
                self.match(StructurizrParser.STRING)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1667
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGVAR(self):
            return self.getToken(StructurizrParser.BANGVAR, 0)

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_var" ):
                listener.enterBang_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_var" ):
                listener.exitBang_var(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_var" ):
                return visitor.visitBang_var(self)
            else:
                return visitor.visitChildren(self)




    def bang_var(self):

        localctx = StructurizrParser.Bang_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_bang_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(StructurizrParser.BANGVAR)
            self.state = 1671
            self.match(StructurizrParser.IDENTIFIER)
            self.state = 1672
            self.value()
            self.state = 1673
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_constContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGCONST(self):
            return self.getToken(StructurizrParser.BANGCONST, 0)

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_const

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_const" ):
                listener.enterBang_const(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_const" ):
                listener.exitBang_const(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_const" ):
                return visitor.visitBang_const(self)
            else:
                return visitor.visitChildren(self)




    def bang_const(self):

        localctx = StructurizrParser.Bang_constContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_bang_const)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.match(StructurizrParser.BANGCONST)
            self.state = 1676
            self.match(StructurizrParser.IDENTIFIER)
            self.state = 1677
            self.value()
            self.state = 1678
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_includeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGINCLUDE(self):
            return self.getToken(StructurizrParser.BANGINCLUDE, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_include" ):
                listener.enterBang_include(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_include" ):
                listener.exitBang_include(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_include" ):
                return visitor.visitBang_include(self)
            else:
                return visitor.visitChildren(self)




    def bang_include(self):

        localctx = StructurizrParser.Bang_includeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_bang_include)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.match(StructurizrParser.BANGINCLUDE)
            self.state = 1681
            _la = self._input.LA(1)
            if not(_la==186 or _la==190):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1682
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_pluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANGPLUGIN(self):
            return self.getToken(StructurizrParser.BANGPLUGIN, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def bang_plugin_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Bang_plugin_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Bang_plugin_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_plugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_plugin" ):
                listener.enterBang_plugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_plugin" ):
                listener.exitBang_plugin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_plugin" ):
                return visitor.visitBang_plugin(self)
            else:
                return visitor.visitChildren(self)




    def bang_plugin(self):

        localctx = StructurizrParser.Bang_pluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_bang_plugin)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.match(StructurizrParser.BANGPLUGIN)
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1685
                self.match(StructurizrParser.URLTEXT)
                pass

            elif la_ == 2:
                self.state = 1686
                self.name()
                pass


            self.state = 1698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1689
                self.openCurly()
                self.state = 1693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==184 or _la==196:
                    self.state = 1690
                    self.bang_plugin_body()
                    self.state = 1695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1696
                self.closeCurly()


            self.state = 1700
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bang_plugin_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.STRING)
            else:
                return self.getToken(StructurizrParser.STRING, i)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_bang_plugin_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBang_plugin_body" ):
                listener.enterBang_plugin_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBang_plugin_body" ):
                listener.exitBang_plugin_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBang_plugin_body" ):
                return visitor.visitBang_plugin_body(self)
            else:
                return visitor.visitChildren(self)




    def bang_plugin_body(self):

        localctx = StructurizrParser.Bang_plugin_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_bang_plugin_body)
        try:
            self.state = 1706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1702
                self.match(StructurizrParser.STRING)
                self.state = 1703
                self.match(StructurizrParser.STRING)
                self.state = 1704
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1705
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BangsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bang_docs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_docsContext,0)


        def bang_adrs(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_adrsContext,0)


        def bang_identifiers(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_identifiersContext,0)


        def bang_extend(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_extendContext,0)


        def bang_ref(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_refContext,0)


        def bang_script(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_scriptContext,0)


        def bang_const(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_constContext,0)


        def bang_impliedRelationships(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_impliedRelationshipsContext,0)


        def bang_var(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_varContext,0)


        def bang_plugin(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_pluginContext,0)


        def bang_include(self):
            return self.getTypedRuleContext(StructurizrParser.Bang_includeContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_bangs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBangs" ):
                listener.enterBangs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBangs" ):
                listener.exitBangs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBangs" ):
                return visitor.visitBangs(self)
            else:
                return visitor.visitChildren(self)




    def bangs(self):

        localctx = StructurizrParser.BangsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_bangs)
        try:
            self.state = 1719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1708
                self.bang_docs()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1709
                self.bang_adrs()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1710
                self.bang_identifiers()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1711
                self.bang_extend()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1712
                self.bang_ref()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1713
                self.bang_script()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1714
                self.bang_const()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1715
                self.bang_impliedRelationships()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1716
                self.bang_var()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1717
                self.bang_plugin()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1718
                self.bang_include()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminologyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def terminology_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Terminology_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Terminology_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_terminology

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminology" ):
                listener.enterTerminology(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminology" ):
                listener.exitTerminology(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminology" ):
                return visitor.visitTerminology(self)
            else:
                return visitor.visitChildren(self)




    def terminology(self):

        localctx = StructurizrParser.TerminologyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_terminology)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.match(StructurizrParser.T__114)
            self.state = 1722
            self.openCurly()
            self.state = 1726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 268435455) != 0):
                self.state = 1723
                self.terminology_body()
                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1729
            self.closeCurly()
            self.state = 1730
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Terminology_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keywords(self):
            return self.getTypedRuleContext(StructurizrParser.KeywordsContext,0)


        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_terminology_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminology_body" ):
                listener.enterTerminology_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminology_body" ):
                listener.exitTerminology_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminology_body" ):
                return visitor.visitTerminology_body(self)
            else:
                return visitor.visitChildren(self)




    def terminology_body(self):

        localctx = StructurizrParser.Terminology_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_terminology_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.keywords()
            self.state = 1733
            self.match(StructurizrParser.IDENTIFIER)
            self.state = 1734
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USERS(self):
            return self.getToken(StructurizrParser.USERS, 0)

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def users_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Users_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Users_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_users

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsers" ):
                listener.enterUsers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsers" ):
                listener.exitUsers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsers" ):
                return visitor.visitUsers(self)
            else:
                return visitor.visitChildren(self)




    def users(self):

        localctx = StructurizrParser.UsersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_users)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.match(StructurizrParser.USERS)
            self.state = 1737
            self.openCurly()
            self.state = 1741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==190:
                self.state = 1738
                self.users_body()
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1744
            self.closeCurly()
            self.state = 1745
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Users_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_users_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsers_body" ):
                listener.enterUsers_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsers_body" ):
                listener.exitUsers_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsers_body" ):
                return visitor.visitUsers_body(self)
            else:
                return visitor.visitChildren(self)




    def users_body(self):

        localctx = StructurizrParser.Users_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_users_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self.match(StructurizrParser.URLTEXT)
            self.state = 1748
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1749
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def SOFTWARESYSTEM(self):
            return self.getToken(StructurizrParser.SOFTWARESYSTEM, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = StructurizrParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(StructurizrParser.T__117)
            self.state = 1752
            _la = self._input.LA(1)
            if not(((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1125899906842627) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1753
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = StructurizrParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.match(StructurizrParser.T__120)
            self.state = 1756
            _la = self._input.LA(1)
            if not(_la==122 or _la==123):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1757
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThemesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def URLTEXT(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.URLTEXT)
            else:
                return self.getToken(StructurizrParser.URLTEXT, i)

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_themes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThemes" ):
                listener.enterThemes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThemes" ):
                listener.exitThemes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThemes" ):
                return visitor.visitThemes(self)
            else:
                return visitor.visitChildren(self)




    def themes(self):

        localctx = StructurizrParser.ThemesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_themes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.match(StructurizrParser.T__123)
            self.state = 1760
            self.match(StructurizrParser.URLTEXT)
            self.state = 1764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==190:
                self.state = 1761
                self.match(StructurizrParser.URLTEXT)
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1767
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThemeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_theme

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheme" ):
                listener.enterTheme(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheme" ):
                listener.exitTheme(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheme" ):
                return visitor.visitTheme(self)
            else:
                return visitor.visitChildren(self)




    def theme(self):

        localctx = StructurizrParser.ThemeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_theme)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(StructurizrParser.T__124)
            self.state = 1770
            _la = self._input.LA(1)
            if not(_la==28 or _la==190):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1771
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrandingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def branding_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Branding_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Branding_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_branding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranding" ):
                listener.enterBranding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranding" ):
                listener.exitBranding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBranding" ):
                return visitor.visitBranding(self)
            else:
                return visitor.visitChildren(self)




    def branding(self):

        localctx = StructurizrParser.BrandingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_branding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.match(StructurizrParser.T__125)
            self.state = 1774
            self.openCurly()
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==127 or _la==128 or _la==196:
                self.state = 1775
                self.branding_body()
                self.state = 1780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1781
            self.closeCurly()
            self.state = 1782
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Branding_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_branding_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranding_body" ):
                listener.enterBranding_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranding_body" ):
                listener.exitBranding_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBranding_body" ):
                return visitor.visitBranding_body(self)
            else:
                return visitor.visitChildren(self)




    def branding_body(self):

        localctx = StructurizrParser.Branding_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_branding_body)
        try:
            self.state = 1796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1784
                self.match(StructurizrParser.T__126)
                self.state = 1787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1785
                    self.name()
                    pass

                elif la_ == 2:
                    self.state = 1786
                    self.match(StructurizrParser.URLTEXT)
                    pass


                self.state = 1789
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1790
                self.match(StructurizrParser.T__127)
                self.state = 1791
                self.name()
                self.state = 1792
                self.match(StructurizrParser.URLTEXT)
                self.state = 1793
                self.match(StructurizrParser.NEWLINE)
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1795
                self.match(StructurizrParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenCurlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_openCurly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenCurly" ):
                listener.enterOpenCurly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenCurly" ):
                listener.exitOpenCurly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenCurly" ):
                return visitor.visitOpenCurly(self)
            else:
                return visitor.visitChildren(self)




    def openCurly(self):

        localctx = StructurizrParser.OpenCurlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_openCurly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.match(StructurizrParser.T__128)
            self.state = 1799
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseCurlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return StructurizrParser.RULE_closeCurly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseCurly" ):
                listener.enterCloseCurly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseCurly" ):
                listener.exitCloseCurly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseCurly" ):
                return visitor.visitCloseCurly(self)
            else:
                return visitor.visitChildren(self)




    def closeCurly(self):

        localctx = StructurizrParser.CloseCurlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_closeCurly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.match(StructurizrParser.T__129)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstancesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANCE_STRING(self):
            return self.getToken(StructurizrParser.INSTANCE_STRING, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_instances

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstances" ):
                listener.enterInstances(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstances" ):
                listener.exitInstances(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstances" ):
                return visitor.visitInstances(self)
            else:
                return visitor.visitChildren(self)




    def instances(self):

        localctx = StructurizrParser.InstancesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_instances)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(StructurizrParser.T__130)
            self.state = 1804
            self.match(StructurizrParser.INSTANCE_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPath" ):
                return visitor.visitPath(self)
            else:
                return visitor.visitChildren(self)




    def path(self):

        localctx = StructurizrParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def keywords(self):
            return self.getTypedRuleContext(StructurizrParser.KeywordsContext,0)


        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = StructurizrParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_name)
        try:
            self.state = 1812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [186]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1808
                self.match(StructurizrParser.IDENTIFIER)
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1809
                self.match(StructurizrParser.STRING)
                pass
            elif token in [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1810
                self.keywords()
                pass
            elif token in [190]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1811
                self.match(StructurizrParser.URLTEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(StructurizrParser.NUMBER, 0)

        def BOOLEAN(self):
            return self.getToken(StructurizrParser.BOOLEAN, 0)

        def HEXNUMBER(self):
            return self.getToken(StructurizrParser.HEXNUMBER, 0)

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def object_(self):
            return self.getTypedRuleContext(StructurizrParser.ObjectContext,0)


        def array(self):
            return self.getTypedRuleContext(StructurizrParser.ArrayContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = StructurizrParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_value)
        try:
            self.state = 1821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                self.match(StructurizrParser.STRING)
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1815
                self.match(StructurizrParser.NUMBER)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1816
                self.match(StructurizrParser.BOOLEAN)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1817
                self.match(StructurizrParser.HEXNUMBER)
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1818
                self.match(StructurizrParser.IDENTIFIER)
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1819
                self.object_()
                pass
            elif token in [191]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1820
                self.array()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.STRING)
            else:
                return self.getToken(StructurizrParser.STRING, i)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.ValueContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.ValueContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.SEMICOLON)
            else:
                return self.getToken(StructurizrParser.SEMICOLON, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject" ):
                listener.enterObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject" ):
                listener.exitObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject" ):
                return visitor.visitObject(self)
            else:
                return visitor.visitChildren(self)




    def object_(self):

        localctx = StructurizrParser.ObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_object)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(StructurizrParser.T__128)
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==184:
                self.state = 1824
                self.match(StructurizrParser.STRING)
                self.state = 1825
                self.match(StructurizrParser.T__131)
                self.state = 1826
                self.value()
                self.state = 1827
                self.match(StructurizrParser.SEMICOLON)
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1834
            self.match(StructurizrParser.T__129)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def name_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Name_value_pairContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Name_value_pairContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperties" ):
                return visitor.visitProperties(self)
            else:
                return visitor.visitChildren(self)




    def properties(self):

        localctx = StructurizrParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(StructurizrParser.T__132)
            self.state = 1837
            self.openCurly()
            self.state = 1839 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1838
                self.name_value_pair()
                self.state = 1841 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 2371090382847) != 0)):
                    break

            self.state = 1843
            self.closeCurly()
            self.state = 1844
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def value(self):
            return self.getTypedRuleContext(StructurizrParser.ValueContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_name_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_value_pair" ):
                listener.enterName_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_value_pair" ):
                listener.exitName_value_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_value_pair" ):
                return visitor.visitName_value_pair(self)
            else:
                return visitor.visitChildren(self)




    def name_value_pair(self):

        localctx = StructurizrParser.Name_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_name_value_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1846
            self.name()
            self.state = 1847
            self.value()
            self.state = 1848
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def keywords(self):
            return self.getTypedRuleContext(StructurizrParser.KeywordsContext,0)


        def getRuleIndex(self):
            return StructurizrParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = StructurizrParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [186]:
                self.state = 1850
                self.match(StructurizrParser.IDENTIFIER)
                pass
            elif token in [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176]:
                self.state = 1851
                self.keywords()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1854
            self.match(StructurizrParser.T__133)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TechnologyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_technology

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTechnology" ):
                listener.enterTechnology(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTechnology" ):
                listener.exitTechnology(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTechnology" ):
                return visitor.visitTechnology(self)
            else:
                return visitor.visitChildren(self)




    def technology(self):

        localctx = StructurizrParser.TechnologyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_technology)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            _la = self._input.LA(1)
            if not(_la==184 or _la==186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = StructurizrParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            _la = self._input.LA(1)
            if not(_la==184 or _la==186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey" ):
                listener.enterKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey" ):
                listener.exitKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey" ):
                return visitor.visitKey(self)
            else:
                return visitor.visitChildren(self)




    def key(self):

        localctx = StructurizrParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            _la = self._input.LA(1)
            if not(_la==184 or _la==186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(StructurizrParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescription" ):
                listener.enterDescription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescription" ):
                listener.exitDescription(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescription" ):
                return visitor.visitDescription(self)
            else:
                return visitor.visitChildren(self)




    def description(self):

        localctx = StructurizrParser.DescriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_description)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            _la = self._input.LA(1)
            if not(_la==184 or _la==186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.STRING)
            else:
                return self.getToken(StructurizrParser.STRING, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(StructurizrParser.COMMA)
            else:
                return self.getToken(StructurizrParser.COMMA, i)

        def getRuleIndex(self):
            return StructurizrParser.RULE_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTags" ):
                listener.enterTags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTags" ):
                listener.exitTags(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTags" ):
                return visitor.visitTags(self)
            else:
                return visitor.visitChildren(self)




    def tags(self):

        localctx = StructurizrParser.TagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_tags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(StructurizrParser.STRING)
            self.state = 1871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==194:
                        self.state = 1865
                        self.match(StructurizrParser.COMMA)


                    self.state = 1868
                    self.match(StructurizrParser.STRING) 
                self.state = 1873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TitleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_title

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitle" ):
                listener.enterTitle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitle" ):
                listener.exitTitle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTitle" ):
                return visitor.visitTitle(self)
            else:
                return visitor.visitChildren(self)




    def title(self):

        localctx = StructurizrParser.TitleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_title)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            self.match(StructurizrParser.T__134)
            self.state = 1875
            self.match(StructurizrParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UrlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def URLTEXT(self):
            return self.getToken(StructurizrParser.URLTEXT, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl" ):
                listener.enterUrl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl" ):
                listener.exitUrl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUrl" ):
                return visitor.visitUrl(self)
            else:
                return visitor.visitChildren(self)




    def url(self):

        localctx = StructurizrParser.UrlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.match(StructurizrParser.T__135)
            self.state = 1878
            self.match(StructurizrParser.URLTEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION_TYPE(self):
            return self.getToken(StructurizrParser.LOCATION_TYPE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation" ):
                listener.enterLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation" ):
                listener.exitLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocation" ):
                return visitor.visitLocation(self)
            else:
                return visitor.visitChildren(self)




    def location(self):

        localctx = StructurizrParser.LocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_location)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            self.match(StructurizrParser.LOCATION_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(StructurizrParser.GROUP, 0)

        def name(self):
            return self.getTypedRuleContext(StructurizrParser.NameContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(StructurizrParser.IdentifierContext,0)


        def description(self):
            return self.getTypedRuleContext(StructurizrParser.DescriptionContext,0)


        def openCurly(self):
            return self.getTypedRuleContext(StructurizrParser.OpenCurlyContext,0)


        def closeCurly(self):
            return self.getTypedRuleContext(StructurizrParser.CloseCurlyContext,0)


        def tags(self):
            return self.getTypedRuleContext(StructurizrParser.TagsContext,0)


        def group_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(StructurizrParser.Group_bodyContext)
            else:
                return self.getTypedRuleContext(StructurizrParser.Group_bodyContext,i)


        def getRuleIndex(self):
            return StructurizrParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = StructurizrParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1882
                self.identifier()


            self.state = 1885
            self.match(StructurizrParser.GROUP)
            self.state = 1886
            self.name()
            self.state = 1891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184 or _la==186:
                self.state = 1887
                self.description()
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 1888
                    self.tags()




            self.state = 1902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1893
                self.openCurly()
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 140875195744255) != 0):
                    self.state = 1894
                    self.group_body()
                    self.state = 1899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1900
                self.closeCurly()


            self.state = 1904
            self.match(StructurizrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def person(self):
            return self.getTypedRuleContext(StructurizrParser.PersonContext,0)


        def softwareSystem(self):
            return self.getTypedRuleContext(StructurizrParser.SoftwareSystemContext,0)


        def container(self):
            return self.getTypedRuleContext(StructurizrParser.ContainerContext,0)


        def NEWLINE(self):
            return self.getToken(StructurizrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_group_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_body" ):
                listener.enterGroup_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_body" ):
                listener.exitGroup_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_body" ):
                return visitor.visitGroup_body(self)
            else:
                return visitor.visitChildren(self)




    def group_body(self):

        localctx = StructurizrParser.Group_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_group_body)
        try:
            self.state = 1910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1906
                self.person()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1907
                self.softwareSystem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1908
                self.container()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1909
                self.match(StructurizrParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerspectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(StructurizrParser.STRING, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_perspective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerspective" ):
                listener.enterPerspective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerspective" ):
                listener.exitPerspective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerspective" ):
                return visitor.visitPerspective(self)
            else:
                return visitor.visitChildren(self)




    def perspective(self):

        localctx = StructurizrParser.PerspectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_perspective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.match(StructurizrParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTOLAYOUT(self):
            return self.getToken(StructurizrParser.AUTOLAYOUT, 0)

        def COMPONENT(self):
            return self.getToken(StructurizrParser.COMPONENT, 0)

        def CONFIGURATION(self):
            return self.getToken(StructurizrParser.CONFIGURATION, 0)

        def CONTAINER(self):
            return self.getToken(StructurizrParser.CONTAINER, 0)

        def CONTAINERINSTANCE(self):
            return self.getToken(StructurizrParser.CONTAINERINSTANCE, 0)

        def DEPLOYMENT(self):
            return self.getToken(StructurizrParser.DEPLOYMENT, 0)

        def DEPLOYMENTENVIRONMENT(self):
            return self.getToken(StructurizrParser.DEPLOYMENTENVIRONMENT, 0)

        def DEPLOYMENTGROUP(self):
            return self.getToken(StructurizrParser.DEPLOYMENTGROUP, 0)

        def DEPLOYMENTNODE(self):
            return self.getToken(StructurizrParser.DEPLOYMENTNODE, 0)

        def DESCRIPTION(self):
            return self.getToken(StructurizrParser.DESCRIPTION, 0)

        def ELEMENTVIEW(self):
            return self.getToken(StructurizrParser.ELEMENTVIEW, 0)

        def ELEMENT(self):
            return self.getToken(StructurizrParser.ELEMENT, 0)

        def GROUP(self):
            return self.getToken(StructurizrParser.GROUP, 0)

        def INFRASTRUCTURENODE(self):
            return self.getToken(StructurizrParser.INFRASTRUCTURENODE, 0)

        def IMAGE(self):
            return self.getToken(StructurizrParser.IMAGE, 0)

        def MODEL(self):
            return self.getToken(StructurizrParser.MODEL, 0)

        def PERSON(self):
            return self.getToken(StructurizrParser.PERSON, 0)

        def PERSPECTIVES(self):
            return self.getToken(StructurizrParser.PERSPECTIVES, 0)

        def RELATIONSHIP(self):
            return self.getToken(StructurizrParser.RELATIONSHIP, 0)

        def SOFTWARESYSTEM(self):
            return self.getToken(StructurizrParser.SOFTWARESYSTEM, 0)

        def SOFTWARESYSTEMINSTANCE(self):
            return self.getToken(StructurizrParser.SOFTWARESYSTEMINSTANCE, 0)

        def STYLES(self):
            return self.getToken(StructurizrParser.STYLES, 0)

        def SYSTEMCONTEXT(self):
            return self.getToken(StructurizrParser.SYSTEMCONTEXT, 0)

        def SYSTEMLANDSCAPE(self):
            return self.getToken(StructurizrParser.SYSTEMLANDSCAPE, 0)

        def TAGS(self):
            return self.getToken(StructurizrParser.TAGS, 0)

        def USERS(self):
            return self.getToken(StructurizrParser.USERS, 0)

        def VIEWS(self):
            return self.getToken(StructurizrParser.VIEWS, 0)

        def WORKSPACE(self):
            return self.getToken(StructurizrParser.WORKSPACE, 0)

        def getRuleIndex(self):
            return StructurizrParser.RULE_keywords

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywords" ):
                listener.enterKeywords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywords" ):
                listener.exitKeywords(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywords" ):
                return visitor.visitKeywords(self)
            else:
                return visitor.visitChildren(self)




    def keywords(self):

        localctx = StructurizrParser.KeywordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_keywords)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            _la = self._input.LA(1)
            if not(((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 268435455) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





